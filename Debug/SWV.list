
SWV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000021f8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  080023c8  080023c8  000123c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002480  08002480  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08002480  08002480  00012480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002488  08002488  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002488  08002488  00012488  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800248c  0800248c  0001248c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002490  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  20000070  08002500  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000a4  08002500  000200a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005edc  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000012a5  00000000  00000000  00025f7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000004e0  00000000  00000000  00027228  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000438  00000000  00000000  00027708  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021545  00000000  00000000  00027b40  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00004eef  00000000  00000000  00049085  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c6288  00000000  00000000  0004df74  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001141fc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001898  00000000  00000000  00114278  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080023b0 	.word	0x080023b0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	080023b0 	.word	0x080023b0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005b8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005bc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80005c0:	f003 0301 	and.w	r3, r3, #1
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d013      	beq.n	80005f0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005c8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005cc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80005d0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d00b      	beq.n	80005f0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005d8:	e000      	b.n	80005dc <ITM_SendChar+0x2c>
    {
      __NOP();
 80005da:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005dc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d0f9      	beq.n	80005da <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005e6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005ea:	687a      	ldr	r2, [r7, #4]
 80005ec:	b2d2      	uxtb	r2, r2
 80005ee:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005f0:	687b      	ldr	r3, [r7, #4]
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	370c      	adds	r7, #12
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr

080005fe <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len){
 80005fe:	b580      	push	{r7, lr}
 8000600:	b086      	sub	sp, #24
 8000602:	af00      	add	r7, sp, #0
 8000604:	60f8      	str	r0, [r7, #12]
 8000606:	60b9      	str	r1, [r7, #8]
 8000608:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800060a:	2300      	movs	r3, #0
 800060c:	617b      	str	r3, [r7, #20]
 800060e:	e009      	b.n	8000624 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8000610:	68bb      	ldr	r3, [r7, #8]
 8000612:	1c5a      	adds	r2, r3, #1
 8000614:	60ba      	str	r2, [r7, #8]
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	4618      	mov	r0, r3
 800061a:	f7ff ffc9 	bl	80005b0 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800061e:	697b      	ldr	r3, [r7, #20]
 8000620:	3301      	adds	r3, #1
 8000622:	617b      	str	r3, [r7, #20]
 8000624:	697a      	ldr	r2, [r7, #20]
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	429a      	cmp	r2, r3
 800062a:	dbf1      	blt.n	8000610 <_write+0x12>
	}
	return len;
 800062c:	687b      	ldr	r3, [r7, #4]
}
 800062e:	4618      	mov	r0, r3
 8000630:	3718      	adds	r7, #24
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
	...

08000638 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800063c:	f000 f996 	bl	800096c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000640:	f000 f816 	bl	8000670 <SystemClock_Config>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	printf("Counter: %d \n", count);
 8000644:	4b08      	ldr	r3, [pc, #32]	; (8000668 <main+0x30>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	4619      	mov	r1, r3
 800064a:	4808      	ldr	r0, [pc, #32]	; (800066c <main+0x34>)
 800064c:	f000 ffcc 	bl	80015e8 <iprintf>
	count++;
 8000650:	4b05      	ldr	r3, [pc, #20]	; (8000668 <main+0x30>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	3301      	adds	r3, #1
 8000656:	b2da      	uxtb	r2, r3
 8000658:	4b03      	ldr	r3, [pc, #12]	; (8000668 <main+0x30>)
 800065a:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1000);
 800065c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000660:	f000 f9f6 	bl	8000a50 <HAL_Delay>
	printf("Counter: %d \n", count);
 8000664:	e7ee      	b.n	8000644 <main+0xc>
 8000666:	bf00      	nop
 8000668:	2000008c 	.word	0x2000008c
 800066c:	080023c8 	.word	0x080023c8

08000670 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b094      	sub	sp, #80	; 0x50
 8000674:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000676:	f107 031c 	add.w	r3, r7, #28
 800067a:	2234      	movs	r2, #52	; 0x34
 800067c:	2100      	movs	r1, #0
 800067e:	4618      	mov	r0, r3
 8000680:	f000 ffaa 	bl	80015d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000684:	f107 0308 	add.w	r3, r7, #8
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
 800068c:	605a      	str	r2, [r3, #4]
 800068e:	609a      	str	r2, [r3, #8]
 8000690:	60da      	str	r2, [r3, #12]
 8000692:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000694:	2300      	movs	r3, #0
 8000696:	607b      	str	r3, [r7, #4]
 8000698:	4b23      	ldr	r3, [pc, #140]	; (8000728 <SystemClock_Config+0xb8>)
 800069a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800069c:	4a22      	ldr	r2, [pc, #136]	; (8000728 <SystemClock_Config+0xb8>)
 800069e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006a2:	6413      	str	r3, [r2, #64]	; 0x40
 80006a4:	4b20      	ldr	r3, [pc, #128]	; (8000728 <SystemClock_Config+0xb8>)
 80006a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ac:	607b      	str	r3, [r7, #4]
 80006ae:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006b0:	2300      	movs	r3, #0
 80006b2:	603b      	str	r3, [r7, #0]
 80006b4:	4b1d      	ldr	r3, [pc, #116]	; (800072c <SystemClock_Config+0xbc>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006bc:	4a1b      	ldr	r2, [pc, #108]	; (800072c <SystemClock_Config+0xbc>)
 80006be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006c2:	6013      	str	r3, [r2, #0]
 80006c4:	4b19      	ldr	r3, [pc, #100]	; (800072c <SystemClock_Config+0xbc>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006cc:	603b      	str	r3, [r7, #0]
 80006ce:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006d0:	2302      	movs	r3, #2
 80006d2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006d4:	2301      	movs	r3, #1
 80006d6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006d8:	2310      	movs	r3, #16
 80006da:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006dc:	2300      	movs	r3, #0
 80006de:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e0:	f107 031c 	add.w	r3, r7, #28
 80006e4:	4618      	mov	r0, r3
 80006e6:	f000 fcf3 	bl	80010d0 <HAL_RCC_OscConfig>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80006f0:	f000 f81e 	bl	8000730 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f4:	230f      	movs	r3, #15
 80006f6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006f8:	2300      	movs	r3, #0
 80006fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006fc:	2300      	movs	r3, #0
 80006fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000700:	2300      	movs	r3, #0
 8000702:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000704:	2300      	movs	r3, #0
 8000706:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000708:	f107 0308 	add.w	r3, r7, #8
 800070c:	2100      	movs	r1, #0
 800070e:	4618      	mov	r0, r3
 8000710:	f000 faa6 	bl	8000c60 <HAL_RCC_ClockConfig>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800071a:	f000 f809 	bl	8000730 <Error_Handler>
  }
}
 800071e:	bf00      	nop
 8000720:	3750      	adds	r7, #80	; 0x50
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	40023800 	.word	0x40023800
 800072c:	40007000 	.word	0x40007000

08000730 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000734:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000736:	e7fe      	b.n	8000736 <Error_Handler+0x6>

08000738 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	607b      	str	r3, [r7, #4]
 8000742:	4b10      	ldr	r3, [pc, #64]	; (8000784 <HAL_MspInit+0x4c>)
 8000744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000746:	4a0f      	ldr	r2, [pc, #60]	; (8000784 <HAL_MspInit+0x4c>)
 8000748:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800074c:	6453      	str	r3, [r2, #68]	; 0x44
 800074e:	4b0d      	ldr	r3, [pc, #52]	; (8000784 <HAL_MspInit+0x4c>)
 8000750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000752:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000756:	607b      	str	r3, [r7, #4]
 8000758:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	603b      	str	r3, [r7, #0]
 800075e:	4b09      	ldr	r3, [pc, #36]	; (8000784 <HAL_MspInit+0x4c>)
 8000760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000762:	4a08      	ldr	r2, [pc, #32]	; (8000784 <HAL_MspInit+0x4c>)
 8000764:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000768:	6413      	str	r3, [r2, #64]	; 0x40
 800076a:	4b06      	ldr	r3, [pc, #24]	; (8000784 <HAL_MspInit+0x4c>)
 800076c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800076e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000772:	603b      	str	r3, [r7, #0]
 8000774:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000776:	bf00      	nop
 8000778:	370c      	adds	r7, #12
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop
 8000784:	40023800 	.word	0x40023800

08000788 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800078c:	e7fe      	b.n	800078c <NMI_Handler+0x4>

0800078e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800078e:	b480      	push	{r7}
 8000790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000792:	e7fe      	b.n	8000792 <HardFault_Handler+0x4>

08000794 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000798:	e7fe      	b.n	8000798 <MemManage_Handler+0x4>

0800079a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800079a:	b480      	push	{r7}
 800079c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800079e:	e7fe      	b.n	800079e <BusFault_Handler+0x4>

080007a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007a4:	e7fe      	b.n	80007a4 <UsageFault_Handler+0x4>

080007a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007a6:	b480      	push	{r7}
 80007a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007aa:	bf00      	nop
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr

080007b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007b8:	bf00      	nop
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr

080007c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007c2:	b480      	push	{r7}
 80007c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007c6:	bf00      	nop
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr

080007d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007d4:	f000 f91c 	bl	8000a10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007d8:	bf00      	nop
 80007da:	bd80      	pop	{r7, pc}

080007dc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b086      	sub	sp, #24
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	60f8      	str	r0, [r7, #12]
 80007e4:	60b9      	str	r1, [r7, #8]
 80007e6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007e8:	2300      	movs	r3, #0
 80007ea:	617b      	str	r3, [r7, #20]
 80007ec:	e00a      	b.n	8000804 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80007ee:	f3af 8000 	nop.w
 80007f2:	4601      	mov	r1, r0
 80007f4:	68bb      	ldr	r3, [r7, #8]
 80007f6:	1c5a      	adds	r2, r3, #1
 80007f8:	60ba      	str	r2, [r7, #8]
 80007fa:	b2ca      	uxtb	r2, r1
 80007fc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007fe:	697b      	ldr	r3, [r7, #20]
 8000800:	3301      	adds	r3, #1
 8000802:	617b      	str	r3, [r7, #20]
 8000804:	697a      	ldr	r2, [r7, #20]
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	429a      	cmp	r2, r3
 800080a:	dbf0      	blt.n	80007ee <_read+0x12>
	}

return len;
 800080c:	687b      	ldr	r3, [r7, #4]
}
 800080e:	4618      	mov	r0, r3
 8000810:	3718      	adds	r7, #24
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}

08000816 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000816:	b480      	push	{r7}
 8000818:	b083      	sub	sp, #12
 800081a:	af00      	add	r7, sp, #0
 800081c:	6078      	str	r0, [r7, #4]
	return -1;
 800081e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000822:	4618      	mov	r0, r3
 8000824:	370c      	adds	r7, #12
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr

0800082e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800082e:	b480      	push	{r7}
 8000830:	b083      	sub	sp, #12
 8000832:	af00      	add	r7, sp, #0
 8000834:	6078      	str	r0, [r7, #4]
 8000836:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800083e:	605a      	str	r2, [r3, #4]
	return 0;
 8000840:	2300      	movs	r3, #0
}
 8000842:	4618      	mov	r0, r3
 8000844:	370c      	adds	r7, #12
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr

0800084e <_isatty>:

int _isatty(int file)
{
 800084e:	b480      	push	{r7}
 8000850:	b083      	sub	sp, #12
 8000852:	af00      	add	r7, sp, #0
 8000854:	6078      	str	r0, [r7, #4]
	return 1;
 8000856:	2301      	movs	r3, #1
}
 8000858:	4618      	mov	r0, r3
 800085a:	370c      	adds	r7, #12
 800085c:	46bd      	mov	sp, r7
 800085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000862:	4770      	bx	lr

08000864 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000864:	b480      	push	{r7}
 8000866:	b085      	sub	sp, #20
 8000868:	af00      	add	r7, sp, #0
 800086a:	60f8      	str	r0, [r7, #12]
 800086c:	60b9      	str	r1, [r7, #8]
 800086e:	607a      	str	r2, [r7, #4]
	return 0;
 8000870:	2300      	movs	r3, #0
}
 8000872:	4618      	mov	r0, r3
 8000874:	3714      	adds	r7, #20
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr
	...

08000880 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b086      	sub	sp, #24
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000888:	4a14      	ldr	r2, [pc, #80]	; (80008dc <_sbrk+0x5c>)
 800088a:	4b15      	ldr	r3, [pc, #84]	; (80008e0 <_sbrk+0x60>)
 800088c:	1ad3      	subs	r3, r2, r3
 800088e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000890:	697b      	ldr	r3, [r7, #20]
 8000892:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000894:	4b13      	ldr	r3, [pc, #76]	; (80008e4 <_sbrk+0x64>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	2b00      	cmp	r3, #0
 800089a:	d102      	bne.n	80008a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800089c:	4b11      	ldr	r3, [pc, #68]	; (80008e4 <_sbrk+0x64>)
 800089e:	4a12      	ldr	r2, [pc, #72]	; (80008e8 <_sbrk+0x68>)
 80008a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008a2:	4b10      	ldr	r3, [pc, #64]	; (80008e4 <_sbrk+0x64>)
 80008a4:	681a      	ldr	r2, [r3, #0]
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	4413      	add	r3, r2
 80008aa:	693a      	ldr	r2, [r7, #16]
 80008ac:	429a      	cmp	r2, r3
 80008ae:	d207      	bcs.n	80008c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008b0:	f000 fe68 	bl	8001584 <__errno>
 80008b4:	4602      	mov	r2, r0
 80008b6:	230c      	movs	r3, #12
 80008b8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80008ba:	f04f 33ff 	mov.w	r3, #4294967295
 80008be:	e009      	b.n	80008d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008c0:	4b08      	ldr	r3, [pc, #32]	; (80008e4 <_sbrk+0x64>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008c6:	4b07      	ldr	r3, [pc, #28]	; (80008e4 <_sbrk+0x64>)
 80008c8:	681a      	ldr	r2, [r3, #0]
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	4413      	add	r3, r2
 80008ce:	4a05      	ldr	r2, [pc, #20]	; (80008e4 <_sbrk+0x64>)
 80008d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008d2:	68fb      	ldr	r3, [r7, #12]
}
 80008d4:	4618      	mov	r0, r3
 80008d6:	3718      	adds	r7, #24
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	20020000 	.word	0x20020000
 80008e0:	00000400 	.word	0x00000400
 80008e4:	20000090 	.word	0x20000090
 80008e8:	200000a8 	.word	0x200000a8

080008ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008f0:	4b08      	ldr	r3, [pc, #32]	; (8000914 <SystemInit+0x28>)
 80008f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008f6:	4a07      	ldr	r2, [pc, #28]	; (8000914 <SystemInit+0x28>)
 80008f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000900:	4b04      	ldr	r3, [pc, #16]	; (8000914 <SystemInit+0x28>)
 8000902:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000906:	609a      	str	r2, [r3, #8]
#endif
}
 8000908:	bf00      	nop
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	e000ed00 	.word	0xe000ed00

08000918 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000918:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000950 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800091c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800091e:	e003      	b.n	8000928 <LoopCopyDataInit>

08000920 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000920:	4b0c      	ldr	r3, [pc, #48]	; (8000954 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000922:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000924:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000926:	3104      	adds	r1, #4

08000928 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000928:	480b      	ldr	r0, [pc, #44]	; (8000958 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800092a:	4b0c      	ldr	r3, [pc, #48]	; (800095c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800092c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800092e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000930:	d3f6      	bcc.n	8000920 <CopyDataInit>
  ldr  r2, =_sbss
 8000932:	4a0b      	ldr	r2, [pc, #44]	; (8000960 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000934:	e002      	b.n	800093c <LoopFillZerobss>

08000936 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000936:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000938:	f842 3b04 	str.w	r3, [r2], #4

0800093c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800093c:	4b09      	ldr	r3, [pc, #36]	; (8000964 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800093e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000940:	d3f9      	bcc.n	8000936 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000942:	f7ff ffd3 	bl	80008ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000946:	f000 fe23 	bl	8001590 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800094a:	f7ff fe75 	bl	8000638 <main>
  bx  lr    
 800094e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000950:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000954:	08002490 	.word	0x08002490
  ldr  r0, =_sdata
 8000958:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800095c:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8000960:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8000964:	200000a4 	.word	0x200000a4

08000968 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000968:	e7fe      	b.n	8000968 <ADC_IRQHandler>
	...

0800096c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000970:	4b0e      	ldr	r3, [pc, #56]	; (80009ac <HAL_Init+0x40>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a0d      	ldr	r2, [pc, #52]	; (80009ac <HAL_Init+0x40>)
 8000976:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800097a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800097c:	4b0b      	ldr	r3, [pc, #44]	; (80009ac <HAL_Init+0x40>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a0a      	ldr	r2, [pc, #40]	; (80009ac <HAL_Init+0x40>)
 8000982:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000986:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000988:	4b08      	ldr	r3, [pc, #32]	; (80009ac <HAL_Init+0x40>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a07      	ldr	r2, [pc, #28]	; (80009ac <HAL_Init+0x40>)
 800098e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000992:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000994:	2003      	movs	r0, #3
 8000996:	f000 f92f 	bl	8000bf8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800099a:	2000      	movs	r0, #0
 800099c:	f000 f808 	bl	80009b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009a0:	f7ff feca 	bl	8000738 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009a4:	2300      	movs	r3, #0
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	40023c00 	.word	0x40023c00

080009b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009b8:	4b12      	ldr	r3, [pc, #72]	; (8000a04 <HAL_InitTick+0x54>)
 80009ba:	681a      	ldr	r2, [r3, #0]
 80009bc:	4b12      	ldr	r3, [pc, #72]	; (8000a08 <HAL_InitTick+0x58>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	4619      	mov	r1, r3
 80009c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80009ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80009ce:	4618      	mov	r0, r3
 80009d0:	f000 f939 	bl	8000c46 <HAL_SYSTICK_Config>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009da:	2301      	movs	r3, #1
 80009dc:	e00e      	b.n	80009fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	2b0f      	cmp	r3, #15
 80009e2:	d80a      	bhi.n	80009fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009e4:	2200      	movs	r2, #0
 80009e6:	6879      	ldr	r1, [r7, #4]
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ec:	f000 f90f 	bl	8000c0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009f0:	4a06      	ldr	r2, [pc, #24]	; (8000a0c <HAL_InitTick+0x5c>)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009f6:	2300      	movs	r3, #0
 80009f8:	e000      	b.n	80009fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009fa:	2301      	movs	r3, #1
}
 80009fc:	4618      	mov	r0, r3
 80009fe:	3708      	adds	r7, #8
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	20000000 	.word	0x20000000
 8000a08:	20000008 	.word	0x20000008
 8000a0c:	20000004 	.word	0x20000004

08000a10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a14:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <HAL_IncTick+0x20>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	461a      	mov	r2, r3
 8000a1a:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <HAL_IncTick+0x24>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	4413      	add	r3, r2
 8000a20:	4a04      	ldr	r2, [pc, #16]	; (8000a34 <HAL_IncTick+0x24>)
 8000a22:	6013      	str	r3, [r2, #0]
}
 8000a24:	bf00      	nop
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	20000008 	.word	0x20000008
 8000a34:	2000009c 	.word	0x2000009c

08000a38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a3c:	4b03      	ldr	r3, [pc, #12]	; (8000a4c <HAL_GetTick+0x14>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	2000009c 	.word	0x2000009c

08000a50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b084      	sub	sp, #16
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a58:	f7ff ffee 	bl	8000a38 <HAL_GetTick>
 8000a5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a68:	d005      	beq.n	8000a76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a6a:	4b09      	ldr	r3, [pc, #36]	; (8000a90 <HAL_Delay+0x40>)
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	461a      	mov	r2, r3
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	4413      	add	r3, r2
 8000a74:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a76:	bf00      	nop
 8000a78:	f7ff ffde 	bl	8000a38 <HAL_GetTick>
 8000a7c:	4602      	mov	r2, r0
 8000a7e:	68bb      	ldr	r3, [r7, #8]
 8000a80:	1ad3      	subs	r3, r2, r3
 8000a82:	68fa      	ldr	r2, [r7, #12]
 8000a84:	429a      	cmp	r2, r3
 8000a86:	d8f7      	bhi.n	8000a78 <HAL_Delay+0x28>
  {
  }
}
 8000a88:	bf00      	nop
 8000a8a:	3710      	adds	r7, #16
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	20000008 	.word	0x20000008

08000a94 <__NVIC_SetPriorityGrouping>:
{
 8000a94:	b480      	push	{r7}
 8000a96:	b085      	sub	sp, #20
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	f003 0307 	and.w	r3, r3, #7
 8000aa2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000aa4:	4b0c      	ldr	r3, [pc, #48]	; (8000ad8 <__NVIC_SetPriorityGrouping+0x44>)
 8000aa6:	68db      	ldr	r3, [r3, #12]
 8000aa8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aaa:	68ba      	ldr	r2, [r7, #8]
 8000aac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ab8:	68bb      	ldr	r3, [r7, #8]
 8000aba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000abc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ac0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ac4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ac6:	4a04      	ldr	r2, [pc, #16]	; (8000ad8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	60d3      	str	r3, [r2, #12]
}
 8000acc:	bf00      	nop
 8000ace:	3714      	adds	r7, #20
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr
 8000ad8:	e000ed00 	.word	0xe000ed00

08000adc <__NVIC_GetPriorityGrouping>:
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ae0:	4b04      	ldr	r3, [pc, #16]	; (8000af4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ae2:	68db      	ldr	r3, [r3, #12]
 8000ae4:	0a1b      	lsrs	r3, r3, #8
 8000ae6:	f003 0307 	and.w	r3, r3, #7
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr
 8000af4:	e000ed00 	.word	0xe000ed00

08000af8 <__NVIC_SetPriority>:
{
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	4603      	mov	r3, r0
 8000b00:	6039      	str	r1, [r7, #0]
 8000b02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	db0a      	blt.n	8000b22 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	b2da      	uxtb	r2, r3
 8000b10:	490c      	ldr	r1, [pc, #48]	; (8000b44 <__NVIC_SetPriority+0x4c>)
 8000b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b16:	0112      	lsls	r2, r2, #4
 8000b18:	b2d2      	uxtb	r2, r2
 8000b1a:	440b      	add	r3, r1
 8000b1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000b20:	e00a      	b.n	8000b38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	b2da      	uxtb	r2, r3
 8000b26:	4908      	ldr	r1, [pc, #32]	; (8000b48 <__NVIC_SetPriority+0x50>)
 8000b28:	79fb      	ldrb	r3, [r7, #7]
 8000b2a:	f003 030f 	and.w	r3, r3, #15
 8000b2e:	3b04      	subs	r3, #4
 8000b30:	0112      	lsls	r2, r2, #4
 8000b32:	b2d2      	uxtb	r2, r2
 8000b34:	440b      	add	r3, r1
 8000b36:	761a      	strb	r2, [r3, #24]
}
 8000b38:	bf00      	nop
 8000b3a:	370c      	adds	r7, #12
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr
 8000b44:	e000e100 	.word	0xe000e100
 8000b48:	e000ed00 	.word	0xe000ed00

08000b4c <NVIC_EncodePriority>:
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b089      	sub	sp, #36	; 0x24
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	60f8      	str	r0, [r7, #12]
 8000b54:	60b9      	str	r1, [r7, #8]
 8000b56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	f003 0307 	and.w	r3, r3, #7
 8000b5e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b60:	69fb      	ldr	r3, [r7, #28]
 8000b62:	f1c3 0307 	rsb	r3, r3, #7
 8000b66:	2b04      	cmp	r3, #4
 8000b68:	bf28      	it	cs
 8000b6a:	2304      	movcs	r3, #4
 8000b6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b6e:	69fb      	ldr	r3, [r7, #28]
 8000b70:	3304      	adds	r3, #4
 8000b72:	2b06      	cmp	r3, #6
 8000b74:	d902      	bls.n	8000b7c <NVIC_EncodePriority+0x30>
 8000b76:	69fb      	ldr	r3, [r7, #28]
 8000b78:	3b03      	subs	r3, #3
 8000b7a:	e000      	b.n	8000b7e <NVIC_EncodePriority+0x32>
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b80:	f04f 32ff 	mov.w	r2, #4294967295
 8000b84:	69bb      	ldr	r3, [r7, #24]
 8000b86:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8a:	43da      	mvns	r2, r3
 8000b8c:	68bb      	ldr	r3, [r7, #8]
 8000b8e:	401a      	ands	r2, r3
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b94:	f04f 31ff 	mov.w	r1, #4294967295
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b9e:	43d9      	mvns	r1, r3
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ba4:	4313      	orrs	r3, r2
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	3724      	adds	r7, #36	; 0x24
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
	...

08000bb4 <SysTick_Config>:
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	3b01      	subs	r3, #1
 8000bc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bc4:	d301      	bcc.n	8000bca <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	e00f      	b.n	8000bea <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bca:	4a0a      	ldr	r2, [pc, #40]	; (8000bf4 <SysTick_Config+0x40>)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	3b01      	subs	r3, #1
 8000bd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bd2:	210f      	movs	r1, #15
 8000bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd8:	f7ff ff8e 	bl	8000af8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bdc:	4b05      	ldr	r3, [pc, #20]	; (8000bf4 <SysTick_Config+0x40>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000be2:	4b04      	ldr	r3, [pc, #16]	; (8000bf4 <SysTick_Config+0x40>)
 8000be4:	2207      	movs	r2, #7
 8000be6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000be8:	2300      	movs	r3, #0
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	e000e010 	.word	0xe000e010

08000bf8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c00:	6878      	ldr	r0, [r7, #4]
 8000c02:	f7ff ff47 	bl	8000a94 <__NVIC_SetPriorityGrouping>
}
 8000c06:	bf00      	nop
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}

08000c0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c0e:	b580      	push	{r7, lr}
 8000c10:	b086      	sub	sp, #24
 8000c12:	af00      	add	r7, sp, #0
 8000c14:	4603      	mov	r3, r0
 8000c16:	60b9      	str	r1, [r7, #8]
 8000c18:	607a      	str	r2, [r7, #4]
 8000c1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c20:	f7ff ff5c 	bl	8000adc <__NVIC_GetPriorityGrouping>
 8000c24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c26:	687a      	ldr	r2, [r7, #4]
 8000c28:	68b9      	ldr	r1, [r7, #8]
 8000c2a:	6978      	ldr	r0, [r7, #20]
 8000c2c:	f7ff ff8e 	bl	8000b4c <NVIC_EncodePriority>
 8000c30:	4602      	mov	r2, r0
 8000c32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c36:	4611      	mov	r1, r2
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f7ff ff5d 	bl	8000af8 <__NVIC_SetPriority>
}
 8000c3e:	bf00      	nop
 8000c40:	3718      	adds	r7, #24
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}

08000c46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c46:	b580      	push	{r7, lr}
 8000c48:	b082      	sub	sp, #8
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c4e:	6878      	ldr	r0, [r7, #4]
 8000c50:	f7ff ffb0 	bl	8000bb4 <SysTick_Config>
 8000c54:	4603      	mov	r3, r0
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3708      	adds	r7, #8
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
	...

08000c60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b084      	sub	sp, #16
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
 8000c68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d101      	bne.n	8000c74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000c70:	2301      	movs	r3, #1
 8000c72:	e0cc      	b.n	8000e0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000c74:	4b68      	ldr	r3, [pc, #416]	; (8000e18 <HAL_RCC_ClockConfig+0x1b8>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	f003 030f 	and.w	r3, r3, #15
 8000c7c:	683a      	ldr	r2, [r7, #0]
 8000c7e:	429a      	cmp	r2, r3
 8000c80:	d90c      	bls.n	8000c9c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c82:	4b65      	ldr	r3, [pc, #404]	; (8000e18 <HAL_RCC_ClockConfig+0x1b8>)
 8000c84:	683a      	ldr	r2, [r7, #0]
 8000c86:	b2d2      	uxtb	r2, r2
 8000c88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c8a:	4b63      	ldr	r3, [pc, #396]	; (8000e18 <HAL_RCC_ClockConfig+0x1b8>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f003 030f 	and.w	r3, r3, #15
 8000c92:	683a      	ldr	r2, [r7, #0]
 8000c94:	429a      	cmp	r2, r3
 8000c96:	d001      	beq.n	8000c9c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	e0b8      	b.n	8000e0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f003 0302 	and.w	r3, r3, #2
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d020      	beq.n	8000cea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f003 0304 	and.w	r3, r3, #4
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d005      	beq.n	8000cc0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000cb4:	4b59      	ldr	r3, [pc, #356]	; (8000e1c <HAL_RCC_ClockConfig+0x1bc>)
 8000cb6:	689b      	ldr	r3, [r3, #8]
 8000cb8:	4a58      	ldr	r2, [pc, #352]	; (8000e1c <HAL_RCC_ClockConfig+0x1bc>)
 8000cba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000cbe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	f003 0308 	and.w	r3, r3, #8
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d005      	beq.n	8000cd8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000ccc:	4b53      	ldr	r3, [pc, #332]	; (8000e1c <HAL_RCC_ClockConfig+0x1bc>)
 8000cce:	689b      	ldr	r3, [r3, #8]
 8000cd0:	4a52      	ldr	r2, [pc, #328]	; (8000e1c <HAL_RCC_ClockConfig+0x1bc>)
 8000cd2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000cd6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000cd8:	4b50      	ldr	r3, [pc, #320]	; (8000e1c <HAL_RCC_ClockConfig+0x1bc>)
 8000cda:	689b      	ldr	r3, [r3, #8]
 8000cdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	689b      	ldr	r3, [r3, #8]
 8000ce4:	494d      	ldr	r1, [pc, #308]	; (8000e1c <HAL_RCC_ClockConfig+0x1bc>)
 8000ce6:	4313      	orrs	r3, r2
 8000ce8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f003 0301 	and.w	r3, r3, #1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d044      	beq.n	8000d80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	2b01      	cmp	r3, #1
 8000cfc:	d107      	bne.n	8000d0e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cfe:	4b47      	ldr	r3, [pc, #284]	; (8000e1c <HAL_RCC_ClockConfig+0x1bc>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d119      	bne.n	8000d3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	e07f      	b.n	8000e0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	2b02      	cmp	r3, #2
 8000d14:	d003      	beq.n	8000d1e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000d1a:	2b03      	cmp	r3, #3
 8000d1c:	d107      	bne.n	8000d2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d1e:	4b3f      	ldr	r3, [pc, #252]	; (8000e1c <HAL_RCC_ClockConfig+0x1bc>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d109      	bne.n	8000d3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	e06f      	b.n	8000e0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d2e:	4b3b      	ldr	r3, [pc, #236]	; (8000e1c <HAL_RCC_ClockConfig+0x1bc>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f003 0302 	and.w	r3, r3, #2
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d101      	bne.n	8000d3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	e067      	b.n	8000e0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d3e:	4b37      	ldr	r3, [pc, #220]	; (8000e1c <HAL_RCC_ClockConfig+0x1bc>)
 8000d40:	689b      	ldr	r3, [r3, #8]
 8000d42:	f023 0203 	bic.w	r2, r3, #3
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	4934      	ldr	r1, [pc, #208]	; (8000e1c <HAL_RCC_ClockConfig+0x1bc>)
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000d50:	f7ff fe72 	bl	8000a38 <HAL_GetTick>
 8000d54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d56:	e00a      	b.n	8000d6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d58:	f7ff fe6e 	bl	8000a38 <HAL_GetTick>
 8000d5c:	4602      	mov	r2, r0
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	1ad3      	subs	r3, r2, r3
 8000d62:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d901      	bls.n	8000d6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000d6a:	2303      	movs	r3, #3
 8000d6c:	e04f      	b.n	8000e0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d6e:	4b2b      	ldr	r3, [pc, #172]	; (8000e1c <HAL_RCC_ClockConfig+0x1bc>)
 8000d70:	689b      	ldr	r3, [r3, #8]
 8000d72:	f003 020c 	and.w	r2, r3, #12
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	009b      	lsls	r3, r3, #2
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	d1eb      	bne.n	8000d58 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000d80:	4b25      	ldr	r3, [pc, #148]	; (8000e18 <HAL_RCC_ClockConfig+0x1b8>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f003 030f 	and.w	r3, r3, #15
 8000d88:	683a      	ldr	r2, [r7, #0]
 8000d8a:	429a      	cmp	r2, r3
 8000d8c:	d20c      	bcs.n	8000da8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d8e:	4b22      	ldr	r3, [pc, #136]	; (8000e18 <HAL_RCC_ClockConfig+0x1b8>)
 8000d90:	683a      	ldr	r2, [r7, #0]
 8000d92:	b2d2      	uxtb	r2, r2
 8000d94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d96:	4b20      	ldr	r3, [pc, #128]	; (8000e18 <HAL_RCC_ClockConfig+0x1b8>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f003 030f 	and.w	r3, r3, #15
 8000d9e:	683a      	ldr	r2, [r7, #0]
 8000da0:	429a      	cmp	r2, r3
 8000da2:	d001      	beq.n	8000da8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8000da4:	2301      	movs	r3, #1
 8000da6:	e032      	b.n	8000e0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f003 0304 	and.w	r3, r3, #4
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d008      	beq.n	8000dc6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000db4:	4b19      	ldr	r3, [pc, #100]	; (8000e1c <HAL_RCC_ClockConfig+0x1bc>)
 8000db6:	689b      	ldr	r3, [r3, #8]
 8000db8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	68db      	ldr	r3, [r3, #12]
 8000dc0:	4916      	ldr	r1, [pc, #88]	; (8000e1c <HAL_RCC_ClockConfig+0x1bc>)
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f003 0308 	and.w	r3, r3, #8
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d009      	beq.n	8000de6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000dd2:	4b12      	ldr	r3, [pc, #72]	; (8000e1c <HAL_RCC_ClockConfig+0x1bc>)
 8000dd4:	689b      	ldr	r3, [r3, #8]
 8000dd6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	691b      	ldr	r3, [r3, #16]
 8000dde:	00db      	lsls	r3, r3, #3
 8000de0:	490e      	ldr	r1, [pc, #56]	; (8000e1c <HAL_RCC_ClockConfig+0x1bc>)
 8000de2:	4313      	orrs	r3, r2
 8000de4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000de6:	f000 f821 	bl	8000e2c <HAL_RCC_GetSysClockFreq>
 8000dea:	4601      	mov	r1, r0
 8000dec:	4b0b      	ldr	r3, [pc, #44]	; (8000e1c <HAL_RCC_ClockConfig+0x1bc>)
 8000dee:	689b      	ldr	r3, [r3, #8]
 8000df0:	091b      	lsrs	r3, r3, #4
 8000df2:	f003 030f 	and.w	r3, r3, #15
 8000df6:	4a0a      	ldr	r2, [pc, #40]	; (8000e20 <HAL_RCC_ClockConfig+0x1c0>)
 8000df8:	5cd3      	ldrb	r3, [r2, r3]
 8000dfa:	fa21 f303 	lsr.w	r3, r1, r3
 8000dfe:	4a09      	ldr	r2, [pc, #36]	; (8000e24 <HAL_RCC_ClockConfig+0x1c4>)
 8000e00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8000e02:	4b09      	ldr	r3, [pc, #36]	; (8000e28 <HAL_RCC_ClockConfig+0x1c8>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4618      	mov	r0, r3
 8000e08:	f7ff fdd2 	bl	80009b0 <HAL_InitTick>

  return HAL_OK;
 8000e0c:	2300      	movs	r3, #0
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3710      	adds	r7, #16
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	40023c00 	.word	0x40023c00
 8000e1c:	40023800 	.word	0x40023800
 8000e20:	080023d8 	.word	0x080023d8
 8000e24:	20000000 	.word	0x20000000
 8000e28:	20000004 	.word	0x20000004

08000e2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000e2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e2e:	b087      	sub	sp, #28
 8000e30:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8000e32:	2300      	movs	r3, #0
 8000e34:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8000e36:	2300      	movs	r3, #0
 8000e38:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8000e42:	2300      	movs	r3, #0
 8000e44:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000e46:	4b9f      	ldr	r3, [pc, #636]	; (80010c4 <HAL_RCC_GetSysClockFreq+0x298>)
 8000e48:	689b      	ldr	r3, [r3, #8]
 8000e4a:	f003 030c 	and.w	r3, r3, #12
 8000e4e:	2b0c      	cmp	r3, #12
 8000e50:	f200 8130 	bhi.w	80010b4 <HAL_RCC_GetSysClockFreq+0x288>
 8000e54:	a201      	add	r2, pc, #4	; (adr r2, 8000e5c <HAL_RCC_GetSysClockFreq+0x30>)
 8000e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e5a:	bf00      	nop
 8000e5c:	08000e91 	.word	0x08000e91
 8000e60:	080010b5 	.word	0x080010b5
 8000e64:	080010b5 	.word	0x080010b5
 8000e68:	080010b5 	.word	0x080010b5
 8000e6c:	08000e97 	.word	0x08000e97
 8000e70:	080010b5 	.word	0x080010b5
 8000e74:	080010b5 	.word	0x080010b5
 8000e78:	080010b5 	.word	0x080010b5
 8000e7c:	08000e9d 	.word	0x08000e9d
 8000e80:	080010b5 	.word	0x080010b5
 8000e84:	080010b5 	.word	0x080010b5
 8000e88:	080010b5 	.word	0x080010b5
 8000e8c:	08000fab 	.word	0x08000fab
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000e90:	4b8d      	ldr	r3, [pc, #564]	; (80010c8 <HAL_RCC_GetSysClockFreq+0x29c>)
 8000e92:	613b      	str	r3, [r7, #16]
       break;
 8000e94:	e111      	b.n	80010ba <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8000e96:	4b8d      	ldr	r3, [pc, #564]	; (80010cc <HAL_RCC_GetSysClockFreq+0x2a0>)
 8000e98:	613b      	str	r3, [r7, #16]
      break;
 8000e9a:	e10e      	b.n	80010ba <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000e9c:	4b89      	ldr	r3, [pc, #548]	; (80010c4 <HAL_RCC_GetSysClockFreq+0x298>)
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000ea4:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000ea6:	4b87      	ldr	r3, [pc, #540]	; (80010c4 <HAL_RCC_GetSysClockFreq+0x298>)
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d023      	beq.n	8000efa <HAL_RCC_GetSysClockFreq+0xce>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000eb2:	4b84      	ldr	r3, [pc, #528]	; (80010c4 <HAL_RCC_GetSysClockFreq+0x298>)
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	099b      	lsrs	r3, r3, #6
 8000eb8:	f04f 0400 	mov.w	r4, #0
 8000ebc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8000ec0:	f04f 0200 	mov.w	r2, #0
 8000ec4:	ea03 0501 	and.w	r5, r3, r1
 8000ec8:	ea04 0602 	and.w	r6, r4, r2
 8000ecc:	4a7f      	ldr	r2, [pc, #508]	; (80010cc <HAL_RCC_GetSysClockFreq+0x2a0>)
 8000ece:	fb02 f106 	mul.w	r1, r2, r6
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	fb02 f205 	mul.w	r2, r2, r5
 8000ed8:	440a      	add	r2, r1
 8000eda:	497c      	ldr	r1, [pc, #496]	; (80010cc <HAL_RCC_GetSysClockFreq+0x2a0>)
 8000edc:	fba5 0101 	umull	r0, r1, r5, r1
 8000ee0:	1853      	adds	r3, r2, r1
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	f04f 0400 	mov.w	r4, #0
 8000eea:	461a      	mov	r2, r3
 8000eec:	4623      	mov	r3, r4
 8000eee:	f7ff f9df 	bl	80002b0 <__aeabi_uldivmod>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	460c      	mov	r4, r1
 8000ef6:	617b      	str	r3, [r7, #20]
 8000ef8:	e049      	b.n	8000f8e <HAL_RCC_GetSysClockFreq+0x162>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000efa:	4b72      	ldr	r3, [pc, #456]	; (80010c4 <HAL_RCC_GetSysClockFreq+0x298>)
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	099b      	lsrs	r3, r3, #6
 8000f00:	f04f 0400 	mov.w	r4, #0
 8000f04:	f240 11ff 	movw	r1, #511	; 0x1ff
 8000f08:	f04f 0200 	mov.w	r2, #0
 8000f0c:	ea03 0501 	and.w	r5, r3, r1
 8000f10:	ea04 0602 	and.w	r6, r4, r2
 8000f14:	4629      	mov	r1, r5
 8000f16:	4632      	mov	r2, r6
 8000f18:	f04f 0300 	mov.w	r3, #0
 8000f1c:	f04f 0400 	mov.w	r4, #0
 8000f20:	0154      	lsls	r4, r2, #5
 8000f22:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8000f26:	014b      	lsls	r3, r1, #5
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4622      	mov	r2, r4
 8000f2c:	1b49      	subs	r1, r1, r5
 8000f2e:	eb62 0206 	sbc.w	r2, r2, r6
 8000f32:	f04f 0300 	mov.w	r3, #0
 8000f36:	f04f 0400 	mov.w	r4, #0
 8000f3a:	0194      	lsls	r4, r2, #6
 8000f3c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8000f40:	018b      	lsls	r3, r1, #6
 8000f42:	1a5b      	subs	r3, r3, r1
 8000f44:	eb64 0402 	sbc.w	r4, r4, r2
 8000f48:	f04f 0100 	mov.w	r1, #0
 8000f4c:	f04f 0200 	mov.w	r2, #0
 8000f50:	00e2      	lsls	r2, r4, #3
 8000f52:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8000f56:	00d9      	lsls	r1, r3, #3
 8000f58:	460b      	mov	r3, r1
 8000f5a:	4614      	mov	r4, r2
 8000f5c:	195b      	adds	r3, r3, r5
 8000f5e:	eb44 0406 	adc.w	r4, r4, r6
 8000f62:	f04f 0100 	mov.w	r1, #0
 8000f66:	f04f 0200 	mov.w	r2, #0
 8000f6a:	02a2      	lsls	r2, r4, #10
 8000f6c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8000f70:	0299      	lsls	r1, r3, #10
 8000f72:	460b      	mov	r3, r1
 8000f74:	4614      	mov	r4, r2
 8000f76:	4618      	mov	r0, r3
 8000f78:	4621      	mov	r1, r4
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	f04f 0400 	mov.w	r4, #0
 8000f80:	461a      	mov	r2, r3
 8000f82:	4623      	mov	r3, r4
 8000f84:	f7ff f994 	bl	80002b0 <__aeabi_uldivmod>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	460c      	mov	r4, r1
 8000f8c:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000f8e:	4b4d      	ldr	r3, [pc, #308]	; (80010c4 <HAL_RCC_GetSysClockFreq+0x298>)
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	0c1b      	lsrs	r3, r3, #16
 8000f94:	f003 0303 	and.w	r3, r3, #3
 8000f98:	3301      	adds	r3, #1
 8000f9a:	005b      	lsls	r3, r3, #1
 8000f9c:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8000f9e:	697a      	ldr	r2, [r7, #20]
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fa6:	613b      	str	r3, [r7, #16]
      break;
 8000fa8:	e087      	b.n	80010ba <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000faa:	4b46      	ldr	r3, [pc, #280]	; (80010c4 <HAL_RCC_GetSysClockFreq+0x298>)
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000fb2:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000fb4:	4b43      	ldr	r3, [pc, #268]	; (80010c4 <HAL_RCC_GetSysClockFreq+0x298>)
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d023      	beq.n	8001008 <HAL_RCC_GetSysClockFreq+0x1dc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000fc0:	4b40      	ldr	r3, [pc, #256]	; (80010c4 <HAL_RCC_GetSysClockFreq+0x298>)
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	099b      	lsrs	r3, r3, #6
 8000fc6:	f04f 0400 	mov.w	r4, #0
 8000fca:	f240 11ff 	movw	r1, #511	; 0x1ff
 8000fce:	f04f 0200 	mov.w	r2, #0
 8000fd2:	ea03 0501 	and.w	r5, r3, r1
 8000fd6:	ea04 0602 	and.w	r6, r4, r2
 8000fda:	4a3c      	ldr	r2, [pc, #240]	; (80010cc <HAL_RCC_GetSysClockFreq+0x2a0>)
 8000fdc:	fb02 f106 	mul.w	r1, r2, r6
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	fb02 f205 	mul.w	r2, r2, r5
 8000fe6:	440a      	add	r2, r1
 8000fe8:	4938      	ldr	r1, [pc, #224]	; (80010cc <HAL_RCC_GetSysClockFreq+0x2a0>)
 8000fea:	fba5 0101 	umull	r0, r1, r5, r1
 8000fee:	1853      	adds	r3, r2, r1
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	f04f 0400 	mov.w	r4, #0
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	4623      	mov	r3, r4
 8000ffc:	f7ff f958 	bl	80002b0 <__aeabi_uldivmod>
 8001000:	4603      	mov	r3, r0
 8001002:	460c      	mov	r4, r1
 8001004:	617b      	str	r3, [r7, #20]
 8001006:	e049      	b.n	800109c <HAL_RCC_GetSysClockFreq+0x270>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001008:	4b2e      	ldr	r3, [pc, #184]	; (80010c4 <HAL_RCC_GetSysClockFreq+0x298>)
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	099b      	lsrs	r3, r3, #6
 800100e:	f04f 0400 	mov.w	r4, #0
 8001012:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001016:	f04f 0200 	mov.w	r2, #0
 800101a:	ea03 0501 	and.w	r5, r3, r1
 800101e:	ea04 0602 	and.w	r6, r4, r2
 8001022:	4629      	mov	r1, r5
 8001024:	4632      	mov	r2, r6
 8001026:	f04f 0300 	mov.w	r3, #0
 800102a:	f04f 0400 	mov.w	r4, #0
 800102e:	0154      	lsls	r4, r2, #5
 8001030:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001034:	014b      	lsls	r3, r1, #5
 8001036:	4619      	mov	r1, r3
 8001038:	4622      	mov	r2, r4
 800103a:	1b49      	subs	r1, r1, r5
 800103c:	eb62 0206 	sbc.w	r2, r2, r6
 8001040:	f04f 0300 	mov.w	r3, #0
 8001044:	f04f 0400 	mov.w	r4, #0
 8001048:	0194      	lsls	r4, r2, #6
 800104a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800104e:	018b      	lsls	r3, r1, #6
 8001050:	1a5b      	subs	r3, r3, r1
 8001052:	eb64 0402 	sbc.w	r4, r4, r2
 8001056:	f04f 0100 	mov.w	r1, #0
 800105a:	f04f 0200 	mov.w	r2, #0
 800105e:	00e2      	lsls	r2, r4, #3
 8001060:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001064:	00d9      	lsls	r1, r3, #3
 8001066:	460b      	mov	r3, r1
 8001068:	4614      	mov	r4, r2
 800106a:	195b      	adds	r3, r3, r5
 800106c:	eb44 0406 	adc.w	r4, r4, r6
 8001070:	f04f 0100 	mov.w	r1, #0
 8001074:	f04f 0200 	mov.w	r2, #0
 8001078:	02a2      	lsls	r2, r4, #10
 800107a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800107e:	0299      	lsls	r1, r3, #10
 8001080:	460b      	mov	r3, r1
 8001082:	4614      	mov	r4, r2
 8001084:	4618      	mov	r0, r3
 8001086:	4621      	mov	r1, r4
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	f04f 0400 	mov.w	r4, #0
 800108e:	461a      	mov	r2, r3
 8001090:	4623      	mov	r3, r4
 8001092:	f7ff f90d 	bl	80002b0 <__aeabi_uldivmod>
 8001096:	4603      	mov	r3, r0
 8001098:	460c      	mov	r4, r1
 800109a:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800109c:	4b09      	ldr	r3, [pc, #36]	; (80010c4 <HAL_RCC_GetSysClockFreq+0x298>)
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	0f1b      	lsrs	r3, r3, #28
 80010a2:	f003 0307 	and.w	r3, r3, #7
 80010a6:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 80010a8:	697a      	ldr	r2, [r7, #20]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80010b0:	613b      	str	r3, [r7, #16]
      break;
 80010b2:	e002      	b.n	80010ba <HAL_RCC_GetSysClockFreq+0x28e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80010b4:	4b04      	ldr	r3, [pc, #16]	; (80010c8 <HAL_RCC_GetSysClockFreq+0x29c>)
 80010b6:	613b      	str	r3, [r7, #16]
      break;
 80010b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80010ba:	693b      	ldr	r3, [r7, #16]
}
 80010bc:	4618      	mov	r0, r3
 80010be:	371c      	adds	r7, #28
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010c4:	40023800 	.word	0x40023800
 80010c8:	00f42400 	.word	0x00f42400
 80010cc:	017d7840 	.word	0x017d7840

080010d0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b086      	sub	sp, #24
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80010d8:	2300      	movs	r3, #0
 80010da:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f003 0301 	and.w	r3, r3, #1
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	f000 8083 	beq.w	80011f0 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80010ea:	4b95      	ldr	r3, [pc, #596]	; (8001340 <HAL_RCC_OscConfig+0x270>)
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	f003 030c 	and.w	r3, r3, #12
 80010f2:	2b04      	cmp	r3, #4
 80010f4:	d019      	beq.n	800112a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80010f6:	4b92      	ldr	r3, [pc, #584]	; (8001340 <HAL_RCC_OscConfig+0x270>)
 80010f8:	689b      	ldr	r3, [r3, #8]
 80010fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80010fe:	2b08      	cmp	r3, #8
 8001100:	d106      	bne.n	8001110 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001102:	4b8f      	ldr	r3, [pc, #572]	; (8001340 <HAL_RCC_OscConfig+0x270>)
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800110a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800110e:	d00c      	beq.n	800112a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001110:	4b8b      	ldr	r3, [pc, #556]	; (8001340 <HAL_RCC_OscConfig+0x270>)
 8001112:	689b      	ldr	r3, [r3, #8]
 8001114:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001118:	2b0c      	cmp	r3, #12
 800111a:	d112      	bne.n	8001142 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800111c:	4b88      	ldr	r3, [pc, #544]	; (8001340 <HAL_RCC_OscConfig+0x270>)
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001124:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001128:	d10b      	bne.n	8001142 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800112a:	4b85      	ldr	r3, [pc, #532]	; (8001340 <HAL_RCC_OscConfig+0x270>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001132:	2b00      	cmp	r3, #0
 8001134:	d05b      	beq.n	80011ee <HAL_RCC_OscConfig+0x11e>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d157      	bne.n	80011ee <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	e216      	b.n	8001570 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800114a:	d106      	bne.n	800115a <HAL_RCC_OscConfig+0x8a>
 800114c:	4b7c      	ldr	r3, [pc, #496]	; (8001340 <HAL_RCC_OscConfig+0x270>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a7b      	ldr	r2, [pc, #492]	; (8001340 <HAL_RCC_OscConfig+0x270>)
 8001152:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001156:	6013      	str	r3, [r2, #0]
 8001158:	e01d      	b.n	8001196 <HAL_RCC_OscConfig+0xc6>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001162:	d10c      	bne.n	800117e <HAL_RCC_OscConfig+0xae>
 8001164:	4b76      	ldr	r3, [pc, #472]	; (8001340 <HAL_RCC_OscConfig+0x270>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a75      	ldr	r2, [pc, #468]	; (8001340 <HAL_RCC_OscConfig+0x270>)
 800116a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800116e:	6013      	str	r3, [r2, #0]
 8001170:	4b73      	ldr	r3, [pc, #460]	; (8001340 <HAL_RCC_OscConfig+0x270>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a72      	ldr	r2, [pc, #456]	; (8001340 <HAL_RCC_OscConfig+0x270>)
 8001176:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800117a:	6013      	str	r3, [r2, #0]
 800117c:	e00b      	b.n	8001196 <HAL_RCC_OscConfig+0xc6>
 800117e:	4b70      	ldr	r3, [pc, #448]	; (8001340 <HAL_RCC_OscConfig+0x270>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a6f      	ldr	r2, [pc, #444]	; (8001340 <HAL_RCC_OscConfig+0x270>)
 8001184:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001188:	6013      	str	r3, [r2, #0]
 800118a:	4b6d      	ldr	r3, [pc, #436]	; (8001340 <HAL_RCC_OscConfig+0x270>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a6c      	ldr	r2, [pc, #432]	; (8001340 <HAL_RCC_OscConfig+0x270>)
 8001190:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001194:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d013      	beq.n	80011c6 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800119e:	f7ff fc4b 	bl	8000a38 <HAL_GetTick>
 80011a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011a4:	e008      	b.n	80011b8 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011a6:	f7ff fc47 	bl	8000a38 <HAL_GetTick>
 80011aa:	4602      	mov	r2, r0
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	1ad3      	subs	r3, r2, r3
 80011b0:	2b64      	cmp	r3, #100	; 0x64
 80011b2:	d901      	bls.n	80011b8 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80011b4:	2303      	movs	r3, #3
 80011b6:	e1db      	b.n	8001570 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011b8:	4b61      	ldr	r3, [pc, #388]	; (8001340 <HAL_RCC_OscConfig+0x270>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d0f0      	beq.n	80011a6 <HAL_RCC_OscConfig+0xd6>
 80011c4:	e014      	b.n	80011f0 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011c6:	f7ff fc37 	bl	8000a38 <HAL_GetTick>
 80011ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011cc:	e008      	b.n	80011e0 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011ce:	f7ff fc33 	bl	8000a38 <HAL_GetTick>
 80011d2:	4602      	mov	r2, r0
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	1ad3      	subs	r3, r2, r3
 80011d8:	2b64      	cmp	r3, #100	; 0x64
 80011da:	d901      	bls.n	80011e0 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 80011dc:	2303      	movs	r3, #3
 80011de:	e1c7      	b.n	8001570 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011e0:	4b57      	ldr	r3, [pc, #348]	; (8001340 <HAL_RCC_OscConfig+0x270>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d1f0      	bne.n	80011ce <HAL_RCC_OscConfig+0xfe>
 80011ec:	e000      	b.n	80011f0 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011ee:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f003 0302 	and.w	r3, r3, #2
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d06f      	beq.n	80012dc <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80011fc:	4b50      	ldr	r3, [pc, #320]	; (8001340 <HAL_RCC_OscConfig+0x270>)
 80011fe:	689b      	ldr	r3, [r3, #8]
 8001200:	f003 030c 	and.w	r3, r3, #12
 8001204:	2b00      	cmp	r3, #0
 8001206:	d017      	beq.n	8001238 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001208:	4b4d      	ldr	r3, [pc, #308]	; (8001340 <HAL_RCC_OscConfig+0x270>)
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001210:	2b08      	cmp	r3, #8
 8001212:	d105      	bne.n	8001220 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001214:	4b4a      	ldr	r3, [pc, #296]	; (8001340 <HAL_RCC_OscConfig+0x270>)
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800121c:	2b00      	cmp	r3, #0
 800121e:	d00b      	beq.n	8001238 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001220:	4b47      	ldr	r3, [pc, #284]	; (8001340 <HAL_RCC_OscConfig+0x270>)
 8001222:	689b      	ldr	r3, [r3, #8]
 8001224:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001228:	2b0c      	cmp	r3, #12
 800122a:	d11c      	bne.n	8001266 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800122c:	4b44      	ldr	r3, [pc, #272]	; (8001340 <HAL_RCC_OscConfig+0x270>)
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001234:	2b00      	cmp	r3, #0
 8001236:	d116      	bne.n	8001266 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001238:	4b41      	ldr	r3, [pc, #260]	; (8001340 <HAL_RCC_OscConfig+0x270>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f003 0302 	and.w	r3, r3, #2
 8001240:	2b00      	cmp	r3, #0
 8001242:	d005      	beq.n	8001250 <HAL_RCC_OscConfig+0x180>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	2b01      	cmp	r3, #1
 800124a:	d001      	beq.n	8001250 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 800124c:	2301      	movs	r3, #1
 800124e:	e18f      	b.n	8001570 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001250:	4b3b      	ldr	r3, [pc, #236]	; (8001340 <HAL_RCC_OscConfig+0x270>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	691b      	ldr	r3, [r3, #16]
 800125c:	00db      	lsls	r3, r3, #3
 800125e:	4938      	ldr	r1, [pc, #224]	; (8001340 <HAL_RCC_OscConfig+0x270>)
 8001260:	4313      	orrs	r3, r2
 8001262:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001264:	e03a      	b.n	80012dc <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	68db      	ldr	r3, [r3, #12]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d020      	beq.n	80012b0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800126e:	4b35      	ldr	r3, [pc, #212]	; (8001344 <HAL_RCC_OscConfig+0x274>)
 8001270:	2201      	movs	r2, #1
 8001272:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001274:	f7ff fbe0 	bl	8000a38 <HAL_GetTick>
 8001278:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800127a:	e008      	b.n	800128e <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800127c:	f7ff fbdc 	bl	8000a38 <HAL_GetTick>
 8001280:	4602      	mov	r2, r0
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	2b02      	cmp	r3, #2
 8001288:	d901      	bls.n	800128e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800128a:	2303      	movs	r3, #3
 800128c:	e170      	b.n	8001570 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800128e:	4b2c      	ldr	r3, [pc, #176]	; (8001340 <HAL_RCC_OscConfig+0x270>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f003 0302 	and.w	r3, r3, #2
 8001296:	2b00      	cmp	r3, #0
 8001298:	d0f0      	beq.n	800127c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800129a:	4b29      	ldr	r3, [pc, #164]	; (8001340 <HAL_RCC_OscConfig+0x270>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	691b      	ldr	r3, [r3, #16]
 80012a6:	00db      	lsls	r3, r3, #3
 80012a8:	4925      	ldr	r1, [pc, #148]	; (8001340 <HAL_RCC_OscConfig+0x270>)
 80012aa:	4313      	orrs	r3, r2
 80012ac:	600b      	str	r3, [r1, #0]
 80012ae:	e015      	b.n	80012dc <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012b0:	4b24      	ldr	r3, [pc, #144]	; (8001344 <HAL_RCC_OscConfig+0x274>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012b6:	f7ff fbbf 	bl	8000a38 <HAL_GetTick>
 80012ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012bc:	e008      	b.n	80012d0 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012be:	f7ff fbbb 	bl	8000a38 <HAL_GetTick>
 80012c2:	4602      	mov	r2, r0
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	1ad3      	subs	r3, r2, r3
 80012c8:	2b02      	cmp	r3, #2
 80012ca:	d901      	bls.n	80012d0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80012cc:	2303      	movs	r3, #3
 80012ce:	e14f      	b.n	8001570 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012d0:	4b1b      	ldr	r3, [pc, #108]	; (8001340 <HAL_RCC_OscConfig+0x270>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f003 0302 	and.w	r3, r3, #2
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d1f0      	bne.n	80012be <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f003 0308 	and.w	r3, r3, #8
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d037      	beq.n	8001358 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	695b      	ldr	r3, [r3, #20]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d016      	beq.n	800131e <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012f0:	4b15      	ldr	r3, [pc, #84]	; (8001348 <HAL_RCC_OscConfig+0x278>)
 80012f2:	2201      	movs	r2, #1
 80012f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012f6:	f7ff fb9f 	bl	8000a38 <HAL_GetTick>
 80012fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012fc:	e008      	b.n	8001310 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012fe:	f7ff fb9b 	bl	8000a38 <HAL_GetTick>
 8001302:	4602      	mov	r2, r0
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	1ad3      	subs	r3, r2, r3
 8001308:	2b02      	cmp	r3, #2
 800130a:	d901      	bls.n	8001310 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800130c:	2303      	movs	r3, #3
 800130e:	e12f      	b.n	8001570 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001310:	4b0b      	ldr	r3, [pc, #44]	; (8001340 <HAL_RCC_OscConfig+0x270>)
 8001312:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001314:	f003 0302 	and.w	r3, r3, #2
 8001318:	2b00      	cmp	r3, #0
 800131a:	d0f0      	beq.n	80012fe <HAL_RCC_OscConfig+0x22e>
 800131c:	e01c      	b.n	8001358 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800131e:	4b0a      	ldr	r3, [pc, #40]	; (8001348 <HAL_RCC_OscConfig+0x278>)
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001324:	f7ff fb88 	bl	8000a38 <HAL_GetTick>
 8001328:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800132a:	e00f      	b.n	800134c <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800132c:	f7ff fb84 	bl	8000a38 <HAL_GetTick>
 8001330:	4602      	mov	r2, r0
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	2b02      	cmp	r3, #2
 8001338:	d908      	bls.n	800134c <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 800133a:	2303      	movs	r3, #3
 800133c:	e118      	b.n	8001570 <HAL_RCC_OscConfig+0x4a0>
 800133e:	bf00      	nop
 8001340:	40023800 	.word	0x40023800
 8001344:	42470000 	.word	0x42470000
 8001348:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800134c:	4b8a      	ldr	r3, [pc, #552]	; (8001578 <HAL_RCC_OscConfig+0x4a8>)
 800134e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001350:	f003 0302 	and.w	r3, r3, #2
 8001354:	2b00      	cmp	r3, #0
 8001356:	d1e9      	bne.n	800132c <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f003 0304 	and.w	r3, r3, #4
 8001360:	2b00      	cmp	r3, #0
 8001362:	f000 8097 	beq.w	8001494 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001366:	2300      	movs	r3, #0
 8001368:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800136a:	4b83      	ldr	r3, [pc, #524]	; (8001578 <HAL_RCC_OscConfig+0x4a8>)
 800136c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001372:	2b00      	cmp	r3, #0
 8001374:	d10f      	bne.n	8001396 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001376:	2300      	movs	r3, #0
 8001378:	60fb      	str	r3, [r7, #12]
 800137a:	4b7f      	ldr	r3, [pc, #508]	; (8001578 <HAL_RCC_OscConfig+0x4a8>)
 800137c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137e:	4a7e      	ldr	r2, [pc, #504]	; (8001578 <HAL_RCC_OscConfig+0x4a8>)
 8001380:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001384:	6413      	str	r3, [r2, #64]	; 0x40
 8001386:	4b7c      	ldr	r3, [pc, #496]	; (8001578 <HAL_RCC_OscConfig+0x4a8>)
 8001388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800138e:	60fb      	str	r3, [r7, #12]
 8001390:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001392:	2301      	movs	r3, #1
 8001394:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001396:	4b79      	ldr	r3, [pc, #484]	; (800157c <HAL_RCC_OscConfig+0x4ac>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d118      	bne.n	80013d4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013a2:	4b76      	ldr	r3, [pc, #472]	; (800157c <HAL_RCC_OscConfig+0x4ac>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a75      	ldr	r2, [pc, #468]	; (800157c <HAL_RCC_OscConfig+0x4ac>)
 80013a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013ae:	f7ff fb43 	bl	8000a38 <HAL_GetTick>
 80013b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013b4:	e008      	b.n	80013c8 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013b6:	f7ff fb3f 	bl	8000a38 <HAL_GetTick>
 80013ba:	4602      	mov	r2, r0
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	1ad3      	subs	r3, r2, r3
 80013c0:	2b02      	cmp	r3, #2
 80013c2:	d901      	bls.n	80013c8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80013c4:	2303      	movs	r3, #3
 80013c6:	e0d3      	b.n	8001570 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013c8:	4b6c      	ldr	r3, [pc, #432]	; (800157c <HAL_RCC_OscConfig+0x4ac>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d0f0      	beq.n	80013b6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d106      	bne.n	80013ea <HAL_RCC_OscConfig+0x31a>
 80013dc:	4b66      	ldr	r3, [pc, #408]	; (8001578 <HAL_RCC_OscConfig+0x4a8>)
 80013de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013e0:	4a65      	ldr	r2, [pc, #404]	; (8001578 <HAL_RCC_OscConfig+0x4a8>)
 80013e2:	f043 0301 	orr.w	r3, r3, #1
 80013e6:	6713      	str	r3, [r2, #112]	; 0x70
 80013e8:	e01c      	b.n	8001424 <HAL_RCC_OscConfig+0x354>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	2b05      	cmp	r3, #5
 80013f0:	d10c      	bne.n	800140c <HAL_RCC_OscConfig+0x33c>
 80013f2:	4b61      	ldr	r3, [pc, #388]	; (8001578 <HAL_RCC_OscConfig+0x4a8>)
 80013f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013f6:	4a60      	ldr	r2, [pc, #384]	; (8001578 <HAL_RCC_OscConfig+0x4a8>)
 80013f8:	f043 0304 	orr.w	r3, r3, #4
 80013fc:	6713      	str	r3, [r2, #112]	; 0x70
 80013fe:	4b5e      	ldr	r3, [pc, #376]	; (8001578 <HAL_RCC_OscConfig+0x4a8>)
 8001400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001402:	4a5d      	ldr	r2, [pc, #372]	; (8001578 <HAL_RCC_OscConfig+0x4a8>)
 8001404:	f043 0301 	orr.w	r3, r3, #1
 8001408:	6713      	str	r3, [r2, #112]	; 0x70
 800140a:	e00b      	b.n	8001424 <HAL_RCC_OscConfig+0x354>
 800140c:	4b5a      	ldr	r3, [pc, #360]	; (8001578 <HAL_RCC_OscConfig+0x4a8>)
 800140e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001410:	4a59      	ldr	r2, [pc, #356]	; (8001578 <HAL_RCC_OscConfig+0x4a8>)
 8001412:	f023 0301 	bic.w	r3, r3, #1
 8001416:	6713      	str	r3, [r2, #112]	; 0x70
 8001418:	4b57      	ldr	r3, [pc, #348]	; (8001578 <HAL_RCC_OscConfig+0x4a8>)
 800141a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800141c:	4a56      	ldr	r2, [pc, #344]	; (8001578 <HAL_RCC_OscConfig+0x4a8>)
 800141e:	f023 0304 	bic.w	r3, r3, #4
 8001422:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d015      	beq.n	8001458 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800142c:	f7ff fb04 	bl	8000a38 <HAL_GetTick>
 8001430:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001432:	e00a      	b.n	800144a <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001434:	f7ff fb00 	bl	8000a38 <HAL_GetTick>
 8001438:	4602      	mov	r2, r0
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001442:	4293      	cmp	r3, r2
 8001444:	d901      	bls.n	800144a <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8001446:	2303      	movs	r3, #3
 8001448:	e092      	b.n	8001570 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800144a:	4b4b      	ldr	r3, [pc, #300]	; (8001578 <HAL_RCC_OscConfig+0x4a8>)
 800144c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800144e:	f003 0302 	and.w	r3, r3, #2
 8001452:	2b00      	cmp	r3, #0
 8001454:	d0ee      	beq.n	8001434 <HAL_RCC_OscConfig+0x364>
 8001456:	e014      	b.n	8001482 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001458:	f7ff faee 	bl	8000a38 <HAL_GetTick>
 800145c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800145e:	e00a      	b.n	8001476 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001460:	f7ff faea 	bl	8000a38 <HAL_GetTick>
 8001464:	4602      	mov	r2, r0
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	f241 3288 	movw	r2, #5000	; 0x1388
 800146e:	4293      	cmp	r3, r2
 8001470:	d901      	bls.n	8001476 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8001472:	2303      	movs	r3, #3
 8001474:	e07c      	b.n	8001570 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001476:	4b40      	ldr	r3, [pc, #256]	; (8001578 <HAL_RCC_OscConfig+0x4a8>)
 8001478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	2b00      	cmp	r3, #0
 8001480:	d1ee      	bne.n	8001460 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001482:	7dfb      	ldrb	r3, [r7, #23]
 8001484:	2b01      	cmp	r3, #1
 8001486:	d105      	bne.n	8001494 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001488:	4b3b      	ldr	r3, [pc, #236]	; (8001578 <HAL_RCC_OscConfig+0x4a8>)
 800148a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148c:	4a3a      	ldr	r2, [pc, #232]	; (8001578 <HAL_RCC_OscConfig+0x4a8>)
 800148e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001492:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	699b      	ldr	r3, [r3, #24]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d068      	beq.n	800156e <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800149c:	4b36      	ldr	r3, [pc, #216]	; (8001578 <HAL_RCC_OscConfig+0x4a8>)
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	f003 030c 	and.w	r3, r3, #12
 80014a4:	2b08      	cmp	r3, #8
 80014a6:	d060      	beq.n	800156a <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	699b      	ldr	r3, [r3, #24]
 80014ac:	2b02      	cmp	r3, #2
 80014ae:	d145      	bne.n	800153c <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014b0:	4b33      	ldr	r3, [pc, #204]	; (8001580 <HAL_RCC_OscConfig+0x4b0>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014b6:	f7ff fabf 	bl	8000a38 <HAL_GetTick>
 80014ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014bc:	e008      	b.n	80014d0 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014be:	f7ff fabb 	bl	8000a38 <HAL_GetTick>
 80014c2:	4602      	mov	r2, r0
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	d901      	bls.n	80014d0 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 80014cc:	2303      	movs	r3, #3
 80014ce:	e04f      	b.n	8001570 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014d0:	4b29      	ldr	r3, [pc, #164]	; (8001578 <HAL_RCC_OscConfig+0x4a8>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d1f0      	bne.n	80014be <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	69da      	ldr	r2, [r3, #28]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6a1b      	ldr	r3, [r3, #32]
 80014e4:	431a      	orrs	r2, r3
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ea:	019b      	lsls	r3, r3, #6
 80014ec:	431a      	orrs	r2, r3
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014f2:	085b      	lsrs	r3, r3, #1
 80014f4:	3b01      	subs	r3, #1
 80014f6:	041b      	lsls	r3, r3, #16
 80014f8:	431a      	orrs	r2, r3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014fe:	061b      	lsls	r3, r3, #24
 8001500:	431a      	orrs	r2, r3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001506:	071b      	lsls	r3, r3, #28
 8001508:	491b      	ldr	r1, [pc, #108]	; (8001578 <HAL_RCC_OscConfig+0x4a8>)
 800150a:	4313      	orrs	r3, r2
 800150c:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800150e:	4b1c      	ldr	r3, [pc, #112]	; (8001580 <HAL_RCC_OscConfig+0x4b0>)
 8001510:	2201      	movs	r2, #1
 8001512:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001514:	f7ff fa90 	bl	8000a38 <HAL_GetTick>
 8001518:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800151a:	e008      	b.n	800152e <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800151c:	f7ff fa8c 	bl	8000a38 <HAL_GetTick>
 8001520:	4602      	mov	r2, r0
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	2b02      	cmp	r3, #2
 8001528:	d901      	bls.n	800152e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800152a:	2303      	movs	r3, #3
 800152c:	e020      	b.n	8001570 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800152e:	4b12      	ldr	r3, [pc, #72]	; (8001578 <HAL_RCC_OscConfig+0x4a8>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001536:	2b00      	cmp	r3, #0
 8001538:	d0f0      	beq.n	800151c <HAL_RCC_OscConfig+0x44c>
 800153a:	e018      	b.n	800156e <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800153c:	4b10      	ldr	r3, [pc, #64]	; (8001580 <HAL_RCC_OscConfig+0x4b0>)
 800153e:	2200      	movs	r2, #0
 8001540:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001542:	f7ff fa79 	bl	8000a38 <HAL_GetTick>
 8001546:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001548:	e008      	b.n	800155c <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800154a:	f7ff fa75 	bl	8000a38 <HAL_GetTick>
 800154e:	4602      	mov	r2, r0
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	1ad3      	subs	r3, r2, r3
 8001554:	2b02      	cmp	r3, #2
 8001556:	d901      	bls.n	800155c <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8001558:	2303      	movs	r3, #3
 800155a:	e009      	b.n	8001570 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800155c:	4b06      	ldr	r3, [pc, #24]	; (8001578 <HAL_RCC_OscConfig+0x4a8>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001564:	2b00      	cmp	r3, #0
 8001566:	d1f0      	bne.n	800154a <HAL_RCC_OscConfig+0x47a>
 8001568:	e001      	b.n	800156e <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e000      	b.n	8001570 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 800156e:	2300      	movs	r3, #0
}
 8001570:	4618      	mov	r0, r3
 8001572:	3718      	adds	r7, #24
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	40023800 	.word	0x40023800
 800157c:	40007000 	.word	0x40007000
 8001580:	42470060 	.word	0x42470060

08001584 <__errno>:
 8001584:	4b01      	ldr	r3, [pc, #4]	; (800158c <__errno+0x8>)
 8001586:	6818      	ldr	r0, [r3, #0]
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	2000000c 	.word	0x2000000c

08001590 <__libc_init_array>:
 8001590:	b570      	push	{r4, r5, r6, lr}
 8001592:	4e0d      	ldr	r6, [pc, #52]	; (80015c8 <__libc_init_array+0x38>)
 8001594:	4c0d      	ldr	r4, [pc, #52]	; (80015cc <__libc_init_array+0x3c>)
 8001596:	1ba4      	subs	r4, r4, r6
 8001598:	10a4      	asrs	r4, r4, #2
 800159a:	2500      	movs	r5, #0
 800159c:	42a5      	cmp	r5, r4
 800159e:	d109      	bne.n	80015b4 <__libc_init_array+0x24>
 80015a0:	4e0b      	ldr	r6, [pc, #44]	; (80015d0 <__libc_init_array+0x40>)
 80015a2:	4c0c      	ldr	r4, [pc, #48]	; (80015d4 <__libc_init_array+0x44>)
 80015a4:	f000 ff04 	bl	80023b0 <_init>
 80015a8:	1ba4      	subs	r4, r4, r6
 80015aa:	10a4      	asrs	r4, r4, #2
 80015ac:	2500      	movs	r5, #0
 80015ae:	42a5      	cmp	r5, r4
 80015b0:	d105      	bne.n	80015be <__libc_init_array+0x2e>
 80015b2:	bd70      	pop	{r4, r5, r6, pc}
 80015b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80015b8:	4798      	blx	r3
 80015ba:	3501      	adds	r5, #1
 80015bc:	e7ee      	b.n	800159c <__libc_init_array+0xc>
 80015be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80015c2:	4798      	blx	r3
 80015c4:	3501      	adds	r5, #1
 80015c6:	e7f2      	b.n	80015ae <__libc_init_array+0x1e>
 80015c8:	08002488 	.word	0x08002488
 80015cc:	08002488 	.word	0x08002488
 80015d0:	08002488 	.word	0x08002488
 80015d4:	0800248c 	.word	0x0800248c

080015d8 <memset>:
 80015d8:	4402      	add	r2, r0
 80015da:	4603      	mov	r3, r0
 80015dc:	4293      	cmp	r3, r2
 80015de:	d100      	bne.n	80015e2 <memset+0xa>
 80015e0:	4770      	bx	lr
 80015e2:	f803 1b01 	strb.w	r1, [r3], #1
 80015e6:	e7f9      	b.n	80015dc <memset+0x4>

080015e8 <iprintf>:
 80015e8:	b40f      	push	{r0, r1, r2, r3}
 80015ea:	4b0a      	ldr	r3, [pc, #40]	; (8001614 <iprintf+0x2c>)
 80015ec:	b513      	push	{r0, r1, r4, lr}
 80015ee:	681c      	ldr	r4, [r3, #0]
 80015f0:	b124      	cbz	r4, 80015fc <iprintf+0x14>
 80015f2:	69a3      	ldr	r3, [r4, #24]
 80015f4:	b913      	cbnz	r3, 80015fc <iprintf+0x14>
 80015f6:	4620      	mov	r0, r4
 80015f8:	f000 f84e 	bl	8001698 <__sinit>
 80015fc:	ab05      	add	r3, sp, #20
 80015fe:	9a04      	ldr	r2, [sp, #16]
 8001600:	68a1      	ldr	r1, [r4, #8]
 8001602:	9301      	str	r3, [sp, #4]
 8001604:	4620      	mov	r0, r4
 8001606:	f000 f955 	bl	80018b4 <_vfiprintf_r>
 800160a:	b002      	add	sp, #8
 800160c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001610:	b004      	add	sp, #16
 8001612:	4770      	bx	lr
 8001614:	2000000c 	.word	0x2000000c

08001618 <std>:
 8001618:	2300      	movs	r3, #0
 800161a:	b510      	push	{r4, lr}
 800161c:	4604      	mov	r4, r0
 800161e:	e9c0 3300 	strd	r3, r3, [r0]
 8001622:	6083      	str	r3, [r0, #8]
 8001624:	8181      	strh	r1, [r0, #12]
 8001626:	6643      	str	r3, [r0, #100]	; 0x64
 8001628:	81c2      	strh	r2, [r0, #14]
 800162a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800162e:	6183      	str	r3, [r0, #24]
 8001630:	4619      	mov	r1, r3
 8001632:	2208      	movs	r2, #8
 8001634:	305c      	adds	r0, #92	; 0x5c
 8001636:	f7ff ffcf 	bl	80015d8 <memset>
 800163a:	4b05      	ldr	r3, [pc, #20]	; (8001650 <std+0x38>)
 800163c:	6263      	str	r3, [r4, #36]	; 0x24
 800163e:	4b05      	ldr	r3, [pc, #20]	; (8001654 <std+0x3c>)
 8001640:	62a3      	str	r3, [r4, #40]	; 0x28
 8001642:	4b05      	ldr	r3, [pc, #20]	; (8001658 <std+0x40>)
 8001644:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001646:	4b05      	ldr	r3, [pc, #20]	; (800165c <std+0x44>)
 8001648:	6224      	str	r4, [r4, #32]
 800164a:	6323      	str	r3, [r4, #48]	; 0x30
 800164c:	bd10      	pop	{r4, pc}
 800164e:	bf00      	nop
 8001650:	08001e11 	.word	0x08001e11
 8001654:	08001e33 	.word	0x08001e33
 8001658:	08001e6b 	.word	0x08001e6b
 800165c:	08001e8f 	.word	0x08001e8f

08001660 <_cleanup_r>:
 8001660:	4901      	ldr	r1, [pc, #4]	; (8001668 <_cleanup_r+0x8>)
 8001662:	f000 b885 	b.w	8001770 <_fwalk_reent>
 8001666:	bf00      	nop
 8001668:	08002169 	.word	0x08002169

0800166c <__sfmoreglue>:
 800166c:	b570      	push	{r4, r5, r6, lr}
 800166e:	1e4a      	subs	r2, r1, #1
 8001670:	2568      	movs	r5, #104	; 0x68
 8001672:	4355      	muls	r5, r2
 8001674:	460e      	mov	r6, r1
 8001676:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800167a:	f000 f897 	bl	80017ac <_malloc_r>
 800167e:	4604      	mov	r4, r0
 8001680:	b140      	cbz	r0, 8001694 <__sfmoreglue+0x28>
 8001682:	2100      	movs	r1, #0
 8001684:	e9c0 1600 	strd	r1, r6, [r0]
 8001688:	300c      	adds	r0, #12
 800168a:	60a0      	str	r0, [r4, #8]
 800168c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001690:	f7ff ffa2 	bl	80015d8 <memset>
 8001694:	4620      	mov	r0, r4
 8001696:	bd70      	pop	{r4, r5, r6, pc}

08001698 <__sinit>:
 8001698:	6983      	ldr	r3, [r0, #24]
 800169a:	b510      	push	{r4, lr}
 800169c:	4604      	mov	r4, r0
 800169e:	bb33      	cbnz	r3, 80016ee <__sinit+0x56>
 80016a0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80016a4:	6503      	str	r3, [r0, #80]	; 0x50
 80016a6:	4b12      	ldr	r3, [pc, #72]	; (80016f0 <__sinit+0x58>)
 80016a8:	4a12      	ldr	r2, [pc, #72]	; (80016f4 <__sinit+0x5c>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	6282      	str	r2, [r0, #40]	; 0x28
 80016ae:	4298      	cmp	r0, r3
 80016b0:	bf04      	itt	eq
 80016b2:	2301      	moveq	r3, #1
 80016b4:	6183      	streq	r3, [r0, #24]
 80016b6:	f000 f81f 	bl	80016f8 <__sfp>
 80016ba:	6060      	str	r0, [r4, #4]
 80016bc:	4620      	mov	r0, r4
 80016be:	f000 f81b 	bl	80016f8 <__sfp>
 80016c2:	60a0      	str	r0, [r4, #8]
 80016c4:	4620      	mov	r0, r4
 80016c6:	f000 f817 	bl	80016f8 <__sfp>
 80016ca:	2200      	movs	r2, #0
 80016cc:	60e0      	str	r0, [r4, #12]
 80016ce:	2104      	movs	r1, #4
 80016d0:	6860      	ldr	r0, [r4, #4]
 80016d2:	f7ff ffa1 	bl	8001618 <std>
 80016d6:	2201      	movs	r2, #1
 80016d8:	2109      	movs	r1, #9
 80016da:	68a0      	ldr	r0, [r4, #8]
 80016dc:	f7ff ff9c 	bl	8001618 <std>
 80016e0:	2202      	movs	r2, #2
 80016e2:	2112      	movs	r1, #18
 80016e4:	68e0      	ldr	r0, [r4, #12]
 80016e6:	f7ff ff97 	bl	8001618 <std>
 80016ea:	2301      	movs	r3, #1
 80016ec:	61a3      	str	r3, [r4, #24]
 80016ee:	bd10      	pop	{r4, pc}
 80016f0:	080023e8 	.word	0x080023e8
 80016f4:	08001661 	.word	0x08001661

080016f8 <__sfp>:
 80016f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016fa:	4b1b      	ldr	r3, [pc, #108]	; (8001768 <__sfp+0x70>)
 80016fc:	681e      	ldr	r6, [r3, #0]
 80016fe:	69b3      	ldr	r3, [r6, #24]
 8001700:	4607      	mov	r7, r0
 8001702:	b913      	cbnz	r3, 800170a <__sfp+0x12>
 8001704:	4630      	mov	r0, r6
 8001706:	f7ff ffc7 	bl	8001698 <__sinit>
 800170a:	3648      	adds	r6, #72	; 0x48
 800170c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001710:	3b01      	subs	r3, #1
 8001712:	d503      	bpl.n	800171c <__sfp+0x24>
 8001714:	6833      	ldr	r3, [r6, #0]
 8001716:	b133      	cbz	r3, 8001726 <__sfp+0x2e>
 8001718:	6836      	ldr	r6, [r6, #0]
 800171a:	e7f7      	b.n	800170c <__sfp+0x14>
 800171c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001720:	b16d      	cbz	r5, 800173e <__sfp+0x46>
 8001722:	3468      	adds	r4, #104	; 0x68
 8001724:	e7f4      	b.n	8001710 <__sfp+0x18>
 8001726:	2104      	movs	r1, #4
 8001728:	4638      	mov	r0, r7
 800172a:	f7ff ff9f 	bl	800166c <__sfmoreglue>
 800172e:	6030      	str	r0, [r6, #0]
 8001730:	2800      	cmp	r0, #0
 8001732:	d1f1      	bne.n	8001718 <__sfp+0x20>
 8001734:	230c      	movs	r3, #12
 8001736:	603b      	str	r3, [r7, #0]
 8001738:	4604      	mov	r4, r0
 800173a:	4620      	mov	r0, r4
 800173c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800173e:	4b0b      	ldr	r3, [pc, #44]	; (800176c <__sfp+0x74>)
 8001740:	6665      	str	r5, [r4, #100]	; 0x64
 8001742:	e9c4 5500 	strd	r5, r5, [r4]
 8001746:	60a5      	str	r5, [r4, #8]
 8001748:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800174c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8001750:	2208      	movs	r2, #8
 8001752:	4629      	mov	r1, r5
 8001754:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001758:	f7ff ff3e 	bl	80015d8 <memset>
 800175c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001760:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001764:	e7e9      	b.n	800173a <__sfp+0x42>
 8001766:	bf00      	nop
 8001768:	080023e8 	.word	0x080023e8
 800176c:	ffff0001 	.word	0xffff0001

08001770 <_fwalk_reent>:
 8001770:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001774:	4680      	mov	r8, r0
 8001776:	4689      	mov	r9, r1
 8001778:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800177c:	2600      	movs	r6, #0
 800177e:	b914      	cbnz	r4, 8001786 <_fwalk_reent+0x16>
 8001780:	4630      	mov	r0, r6
 8001782:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001786:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800178a:	3f01      	subs	r7, #1
 800178c:	d501      	bpl.n	8001792 <_fwalk_reent+0x22>
 800178e:	6824      	ldr	r4, [r4, #0]
 8001790:	e7f5      	b.n	800177e <_fwalk_reent+0xe>
 8001792:	89ab      	ldrh	r3, [r5, #12]
 8001794:	2b01      	cmp	r3, #1
 8001796:	d907      	bls.n	80017a8 <_fwalk_reent+0x38>
 8001798:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800179c:	3301      	adds	r3, #1
 800179e:	d003      	beq.n	80017a8 <_fwalk_reent+0x38>
 80017a0:	4629      	mov	r1, r5
 80017a2:	4640      	mov	r0, r8
 80017a4:	47c8      	blx	r9
 80017a6:	4306      	orrs	r6, r0
 80017a8:	3568      	adds	r5, #104	; 0x68
 80017aa:	e7ee      	b.n	800178a <_fwalk_reent+0x1a>

080017ac <_malloc_r>:
 80017ac:	b570      	push	{r4, r5, r6, lr}
 80017ae:	1ccd      	adds	r5, r1, #3
 80017b0:	f025 0503 	bic.w	r5, r5, #3
 80017b4:	3508      	adds	r5, #8
 80017b6:	2d0c      	cmp	r5, #12
 80017b8:	bf38      	it	cc
 80017ba:	250c      	movcc	r5, #12
 80017bc:	2d00      	cmp	r5, #0
 80017be:	4606      	mov	r6, r0
 80017c0:	db01      	blt.n	80017c6 <_malloc_r+0x1a>
 80017c2:	42a9      	cmp	r1, r5
 80017c4:	d903      	bls.n	80017ce <_malloc_r+0x22>
 80017c6:	230c      	movs	r3, #12
 80017c8:	6033      	str	r3, [r6, #0]
 80017ca:	2000      	movs	r0, #0
 80017cc:	bd70      	pop	{r4, r5, r6, pc}
 80017ce:	f000 fd6b 	bl	80022a8 <__malloc_lock>
 80017d2:	4a21      	ldr	r2, [pc, #132]	; (8001858 <_malloc_r+0xac>)
 80017d4:	6814      	ldr	r4, [r2, #0]
 80017d6:	4621      	mov	r1, r4
 80017d8:	b991      	cbnz	r1, 8001800 <_malloc_r+0x54>
 80017da:	4c20      	ldr	r4, [pc, #128]	; (800185c <_malloc_r+0xb0>)
 80017dc:	6823      	ldr	r3, [r4, #0]
 80017de:	b91b      	cbnz	r3, 80017e8 <_malloc_r+0x3c>
 80017e0:	4630      	mov	r0, r6
 80017e2:	f000 fb05 	bl	8001df0 <_sbrk_r>
 80017e6:	6020      	str	r0, [r4, #0]
 80017e8:	4629      	mov	r1, r5
 80017ea:	4630      	mov	r0, r6
 80017ec:	f000 fb00 	bl	8001df0 <_sbrk_r>
 80017f0:	1c43      	adds	r3, r0, #1
 80017f2:	d124      	bne.n	800183e <_malloc_r+0x92>
 80017f4:	230c      	movs	r3, #12
 80017f6:	6033      	str	r3, [r6, #0]
 80017f8:	4630      	mov	r0, r6
 80017fa:	f000 fd56 	bl	80022aa <__malloc_unlock>
 80017fe:	e7e4      	b.n	80017ca <_malloc_r+0x1e>
 8001800:	680b      	ldr	r3, [r1, #0]
 8001802:	1b5b      	subs	r3, r3, r5
 8001804:	d418      	bmi.n	8001838 <_malloc_r+0x8c>
 8001806:	2b0b      	cmp	r3, #11
 8001808:	d90f      	bls.n	800182a <_malloc_r+0x7e>
 800180a:	600b      	str	r3, [r1, #0]
 800180c:	50cd      	str	r5, [r1, r3]
 800180e:	18cc      	adds	r4, r1, r3
 8001810:	4630      	mov	r0, r6
 8001812:	f000 fd4a 	bl	80022aa <__malloc_unlock>
 8001816:	f104 000b 	add.w	r0, r4, #11
 800181a:	1d23      	adds	r3, r4, #4
 800181c:	f020 0007 	bic.w	r0, r0, #7
 8001820:	1ac3      	subs	r3, r0, r3
 8001822:	d0d3      	beq.n	80017cc <_malloc_r+0x20>
 8001824:	425a      	negs	r2, r3
 8001826:	50e2      	str	r2, [r4, r3]
 8001828:	e7d0      	b.n	80017cc <_malloc_r+0x20>
 800182a:	428c      	cmp	r4, r1
 800182c:	684b      	ldr	r3, [r1, #4]
 800182e:	bf16      	itet	ne
 8001830:	6063      	strne	r3, [r4, #4]
 8001832:	6013      	streq	r3, [r2, #0]
 8001834:	460c      	movne	r4, r1
 8001836:	e7eb      	b.n	8001810 <_malloc_r+0x64>
 8001838:	460c      	mov	r4, r1
 800183a:	6849      	ldr	r1, [r1, #4]
 800183c:	e7cc      	b.n	80017d8 <_malloc_r+0x2c>
 800183e:	1cc4      	adds	r4, r0, #3
 8001840:	f024 0403 	bic.w	r4, r4, #3
 8001844:	42a0      	cmp	r0, r4
 8001846:	d005      	beq.n	8001854 <_malloc_r+0xa8>
 8001848:	1a21      	subs	r1, r4, r0
 800184a:	4630      	mov	r0, r6
 800184c:	f000 fad0 	bl	8001df0 <_sbrk_r>
 8001850:	3001      	adds	r0, #1
 8001852:	d0cf      	beq.n	80017f4 <_malloc_r+0x48>
 8001854:	6025      	str	r5, [r4, #0]
 8001856:	e7db      	b.n	8001810 <_malloc_r+0x64>
 8001858:	20000094 	.word	0x20000094
 800185c:	20000098 	.word	0x20000098

08001860 <__sfputc_r>:
 8001860:	6893      	ldr	r3, [r2, #8]
 8001862:	3b01      	subs	r3, #1
 8001864:	2b00      	cmp	r3, #0
 8001866:	b410      	push	{r4}
 8001868:	6093      	str	r3, [r2, #8]
 800186a:	da08      	bge.n	800187e <__sfputc_r+0x1e>
 800186c:	6994      	ldr	r4, [r2, #24]
 800186e:	42a3      	cmp	r3, r4
 8001870:	db01      	blt.n	8001876 <__sfputc_r+0x16>
 8001872:	290a      	cmp	r1, #10
 8001874:	d103      	bne.n	800187e <__sfputc_r+0x1e>
 8001876:	f85d 4b04 	ldr.w	r4, [sp], #4
 800187a:	f000 bb0d 	b.w	8001e98 <__swbuf_r>
 800187e:	6813      	ldr	r3, [r2, #0]
 8001880:	1c58      	adds	r0, r3, #1
 8001882:	6010      	str	r0, [r2, #0]
 8001884:	7019      	strb	r1, [r3, #0]
 8001886:	4608      	mov	r0, r1
 8001888:	f85d 4b04 	ldr.w	r4, [sp], #4
 800188c:	4770      	bx	lr

0800188e <__sfputs_r>:
 800188e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001890:	4606      	mov	r6, r0
 8001892:	460f      	mov	r7, r1
 8001894:	4614      	mov	r4, r2
 8001896:	18d5      	adds	r5, r2, r3
 8001898:	42ac      	cmp	r4, r5
 800189a:	d101      	bne.n	80018a0 <__sfputs_r+0x12>
 800189c:	2000      	movs	r0, #0
 800189e:	e007      	b.n	80018b0 <__sfputs_r+0x22>
 80018a0:	463a      	mov	r2, r7
 80018a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80018a6:	4630      	mov	r0, r6
 80018a8:	f7ff ffda 	bl	8001860 <__sfputc_r>
 80018ac:	1c43      	adds	r3, r0, #1
 80018ae:	d1f3      	bne.n	8001898 <__sfputs_r+0xa>
 80018b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080018b4 <_vfiprintf_r>:
 80018b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80018b8:	460c      	mov	r4, r1
 80018ba:	b09d      	sub	sp, #116	; 0x74
 80018bc:	4617      	mov	r7, r2
 80018be:	461d      	mov	r5, r3
 80018c0:	4606      	mov	r6, r0
 80018c2:	b118      	cbz	r0, 80018cc <_vfiprintf_r+0x18>
 80018c4:	6983      	ldr	r3, [r0, #24]
 80018c6:	b90b      	cbnz	r3, 80018cc <_vfiprintf_r+0x18>
 80018c8:	f7ff fee6 	bl	8001698 <__sinit>
 80018cc:	4b7c      	ldr	r3, [pc, #496]	; (8001ac0 <_vfiprintf_r+0x20c>)
 80018ce:	429c      	cmp	r4, r3
 80018d0:	d158      	bne.n	8001984 <_vfiprintf_r+0xd0>
 80018d2:	6874      	ldr	r4, [r6, #4]
 80018d4:	89a3      	ldrh	r3, [r4, #12]
 80018d6:	0718      	lsls	r0, r3, #28
 80018d8:	d55e      	bpl.n	8001998 <_vfiprintf_r+0xe4>
 80018da:	6923      	ldr	r3, [r4, #16]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d05b      	beq.n	8001998 <_vfiprintf_r+0xe4>
 80018e0:	2300      	movs	r3, #0
 80018e2:	9309      	str	r3, [sp, #36]	; 0x24
 80018e4:	2320      	movs	r3, #32
 80018e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80018ea:	2330      	movs	r3, #48	; 0x30
 80018ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80018f0:	9503      	str	r5, [sp, #12]
 80018f2:	f04f 0b01 	mov.w	fp, #1
 80018f6:	46b8      	mov	r8, r7
 80018f8:	4645      	mov	r5, r8
 80018fa:	f815 3b01 	ldrb.w	r3, [r5], #1
 80018fe:	b10b      	cbz	r3, 8001904 <_vfiprintf_r+0x50>
 8001900:	2b25      	cmp	r3, #37	; 0x25
 8001902:	d154      	bne.n	80019ae <_vfiprintf_r+0xfa>
 8001904:	ebb8 0a07 	subs.w	sl, r8, r7
 8001908:	d00b      	beq.n	8001922 <_vfiprintf_r+0x6e>
 800190a:	4653      	mov	r3, sl
 800190c:	463a      	mov	r2, r7
 800190e:	4621      	mov	r1, r4
 8001910:	4630      	mov	r0, r6
 8001912:	f7ff ffbc 	bl	800188e <__sfputs_r>
 8001916:	3001      	adds	r0, #1
 8001918:	f000 80c2 	beq.w	8001aa0 <_vfiprintf_r+0x1ec>
 800191c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800191e:	4453      	add	r3, sl
 8001920:	9309      	str	r3, [sp, #36]	; 0x24
 8001922:	f898 3000 	ldrb.w	r3, [r8]
 8001926:	2b00      	cmp	r3, #0
 8001928:	f000 80ba 	beq.w	8001aa0 <_vfiprintf_r+0x1ec>
 800192c:	2300      	movs	r3, #0
 800192e:	f04f 32ff 	mov.w	r2, #4294967295
 8001932:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001936:	9304      	str	r3, [sp, #16]
 8001938:	9307      	str	r3, [sp, #28]
 800193a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800193e:	931a      	str	r3, [sp, #104]	; 0x68
 8001940:	46a8      	mov	r8, r5
 8001942:	2205      	movs	r2, #5
 8001944:	f818 1b01 	ldrb.w	r1, [r8], #1
 8001948:	485e      	ldr	r0, [pc, #376]	; (8001ac4 <_vfiprintf_r+0x210>)
 800194a:	f7fe fc61 	bl	8000210 <memchr>
 800194e:	9b04      	ldr	r3, [sp, #16]
 8001950:	bb78      	cbnz	r0, 80019b2 <_vfiprintf_r+0xfe>
 8001952:	06d9      	lsls	r1, r3, #27
 8001954:	bf44      	itt	mi
 8001956:	2220      	movmi	r2, #32
 8001958:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800195c:	071a      	lsls	r2, r3, #28
 800195e:	bf44      	itt	mi
 8001960:	222b      	movmi	r2, #43	; 0x2b
 8001962:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001966:	782a      	ldrb	r2, [r5, #0]
 8001968:	2a2a      	cmp	r2, #42	; 0x2a
 800196a:	d02a      	beq.n	80019c2 <_vfiprintf_r+0x10e>
 800196c:	9a07      	ldr	r2, [sp, #28]
 800196e:	46a8      	mov	r8, r5
 8001970:	2000      	movs	r0, #0
 8001972:	250a      	movs	r5, #10
 8001974:	4641      	mov	r1, r8
 8001976:	f811 3b01 	ldrb.w	r3, [r1], #1
 800197a:	3b30      	subs	r3, #48	; 0x30
 800197c:	2b09      	cmp	r3, #9
 800197e:	d969      	bls.n	8001a54 <_vfiprintf_r+0x1a0>
 8001980:	b360      	cbz	r0, 80019dc <_vfiprintf_r+0x128>
 8001982:	e024      	b.n	80019ce <_vfiprintf_r+0x11a>
 8001984:	4b50      	ldr	r3, [pc, #320]	; (8001ac8 <_vfiprintf_r+0x214>)
 8001986:	429c      	cmp	r4, r3
 8001988:	d101      	bne.n	800198e <_vfiprintf_r+0xda>
 800198a:	68b4      	ldr	r4, [r6, #8]
 800198c:	e7a2      	b.n	80018d4 <_vfiprintf_r+0x20>
 800198e:	4b4f      	ldr	r3, [pc, #316]	; (8001acc <_vfiprintf_r+0x218>)
 8001990:	429c      	cmp	r4, r3
 8001992:	bf08      	it	eq
 8001994:	68f4      	ldreq	r4, [r6, #12]
 8001996:	e79d      	b.n	80018d4 <_vfiprintf_r+0x20>
 8001998:	4621      	mov	r1, r4
 800199a:	4630      	mov	r0, r6
 800199c:	f000 fae0 	bl	8001f60 <__swsetup_r>
 80019a0:	2800      	cmp	r0, #0
 80019a2:	d09d      	beq.n	80018e0 <_vfiprintf_r+0x2c>
 80019a4:	f04f 30ff 	mov.w	r0, #4294967295
 80019a8:	b01d      	add	sp, #116	; 0x74
 80019aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80019ae:	46a8      	mov	r8, r5
 80019b0:	e7a2      	b.n	80018f8 <_vfiprintf_r+0x44>
 80019b2:	4a44      	ldr	r2, [pc, #272]	; (8001ac4 <_vfiprintf_r+0x210>)
 80019b4:	1a80      	subs	r0, r0, r2
 80019b6:	fa0b f000 	lsl.w	r0, fp, r0
 80019ba:	4318      	orrs	r0, r3
 80019bc:	9004      	str	r0, [sp, #16]
 80019be:	4645      	mov	r5, r8
 80019c0:	e7be      	b.n	8001940 <_vfiprintf_r+0x8c>
 80019c2:	9a03      	ldr	r2, [sp, #12]
 80019c4:	1d11      	adds	r1, r2, #4
 80019c6:	6812      	ldr	r2, [r2, #0]
 80019c8:	9103      	str	r1, [sp, #12]
 80019ca:	2a00      	cmp	r2, #0
 80019cc:	db01      	blt.n	80019d2 <_vfiprintf_r+0x11e>
 80019ce:	9207      	str	r2, [sp, #28]
 80019d0:	e004      	b.n	80019dc <_vfiprintf_r+0x128>
 80019d2:	4252      	negs	r2, r2
 80019d4:	f043 0302 	orr.w	r3, r3, #2
 80019d8:	9207      	str	r2, [sp, #28]
 80019da:	9304      	str	r3, [sp, #16]
 80019dc:	f898 3000 	ldrb.w	r3, [r8]
 80019e0:	2b2e      	cmp	r3, #46	; 0x2e
 80019e2:	d10e      	bne.n	8001a02 <_vfiprintf_r+0x14e>
 80019e4:	f898 3001 	ldrb.w	r3, [r8, #1]
 80019e8:	2b2a      	cmp	r3, #42	; 0x2a
 80019ea:	d138      	bne.n	8001a5e <_vfiprintf_r+0x1aa>
 80019ec:	9b03      	ldr	r3, [sp, #12]
 80019ee:	1d1a      	adds	r2, r3, #4
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	9203      	str	r2, [sp, #12]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	bfb8      	it	lt
 80019f8:	f04f 33ff 	movlt.w	r3, #4294967295
 80019fc:	f108 0802 	add.w	r8, r8, #2
 8001a00:	9305      	str	r3, [sp, #20]
 8001a02:	4d33      	ldr	r5, [pc, #204]	; (8001ad0 <_vfiprintf_r+0x21c>)
 8001a04:	f898 1000 	ldrb.w	r1, [r8]
 8001a08:	2203      	movs	r2, #3
 8001a0a:	4628      	mov	r0, r5
 8001a0c:	f7fe fc00 	bl	8000210 <memchr>
 8001a10:	b140      	cbz	r0, 8001a24 <_vfiprintf_r+0x170>
 8001a12:	2340      	movs	r3, #64	; 0x40
 8001a14:	1b40      	subs	r0, r0, r5
 8001a16:	fa03 f000 	lsl.w	r0, r3, r0
 8001a1a:	9b04      	ldr	r3, [sp, #16]
 8001a1c:	4303      	orrs	r3, r0
 8001a1e:	f108 0801 	add.w	r8, r8, #1
 8001a22:	9304      	str	r3, [sp, #16]
 8001a24:	f898 1000 	ldrb.w	r1, [r8]
 8001a28:	482a      	ldr	r0, [pc, #168]	; (8001ad4 <_vfiprintf_r+0x220>)
 8001a2a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001a2e:	2206      	movs	r2, #6
 8001a30:	f108 0701 	add.w	r7, r8, #1
 8001a34:	f7fe fbec 	bl	8000210 <memchr>
 8001a38:	2800      	cmp	r0, #0
 8001a3a:	d037      	beq.n	8001aac <_vfiprintf_r+0x1f8>
 8001a3c:	4b26      	ldr	r3, [pc, #152]	; (8001ad8 <_vfiprintf_r+0x224>)
 8001a3e:	bb1b      	cbnz	r3, 8001a88 <_vfiprintf_r+0x1d4>
 8001a40:	9b03      	ldr	r3, [sp, #12]
 8001a42:	3307      	adds	r3, #7
 8001a44:	f023 0307 	bic.w	r3, r3, #7
 8001a48:	3308      	adds	r3, #8
 8001a4a:	9303      	str	r3, [sp, #12]
 8001a4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001a4e:	444b      	add	r3, r9
 8001a50:	9309      	str	r3, [sp, #36]	; 0x24
 8001a52:	e750      	b.n	80018f6 <_vfiprintf_r+0x42>
 8001a54:	fb05 3202 	mla	r2, r5, r2, r3
 8001a58:	2001      	movs	r0, #1
 8001a5a:	4688      	mov	r8, r1
 8001a5c:	e78a      	b.n	8001974 <_vfiprintf_r+0xc0>
 8001a5e:	2300      	movs	r3, #0
 8001a60:	f108 0801 	add.w	r8, r8, #1
 8001a64:	9305      	str	r3, [sp, #20]
 8001a66:	4619      	mov	r1, r3
 8001a68:	250a      	movs	r5, #10
 8001a6a:	4640      	mov	r0, r8
 8001a6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001a70:	3a30      	subs	r2, #48	; 0x30
 8001a72:	2a09      	cmp	r2, #9
 8001a74:	d903      	bls.n	8001a7e <_vfiprintf_r+0x1ca>
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d0c3      	beq.n	8001a02 <_vfiprintf_r+0x14e>
 8001a7a:	9105      	str	r1, [sp, #20]
 8001a7c:	e7c1      	b.n	8001a02 <_vfiprintf_r+0x14e>
 8001a7e:	fb05 2101 	mla	r1, r5, r1, r2
 8001a82:	2301      	movs	r3, #1
 8001a84:	4680      	mov	r8, r0
 8001a86:	e7f0      	b.n	8001a6a <_vfiprintf_r+0x1b6>
 8001a88:	ab03      	add	r3, sp, #12
 8001a8a:	9300      	str	r3, [sp, #0]
 8001a8c:	4622      	mov	r2, r4
 8001a8e:	4b13      	ldr	r3, [pc, #76]	; (8001adc <_vfiprintf_r+0x228>)
 8001a90:	a904      	add	r1, sp, #16
 8001a92:	4630      	mov	r0, r6
 8001a94:	f3af 8000 	nop.w
 8001a98:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001a9c:	4681      	mov	r9, r0
 8001a9e:	d1d5      	bne.n	8001a4c <_vfiprintf_r+0x198>
 8001aa0:	89a3      	ldrh	r3, [r4, #12]
 8001aa2:	065b      	lsls	r3, r3, #25
 8001aa4:	f53f af7e 	bmi.w	80019a4 <_vfiprintf_r+0xf0>
 8001aa8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001aaa:	e77d      	b.n	80019a8 <_vfiprintf_r+0xf4>
 8001aac:	ab03      	add	r3, sp, #12
 8001aae:	9300      	str	r3, [sp, #0]
 8001ab0:	4622      	mov	r2, r4
 8001ab2:	4b0a      	ldr	r3, [pc, #40]	; (8001adc <_vfiprintf_r+0x228>)
 8001ab4:	a904      	add	r1, sp, #16
 8001ab6:	4630      	mov	r0, r6
 8001ab8:	f000 f888 	bl	8001bcc <_printf_i>
 8001abc:	e7ec      	b.n	8001a98 <_vfiprintf_r+0x1e4>
 8001abe:	bf00      	nop
 8001ac0:	0800240c 	.word	0x0800240c
 8001ac4:	0800244c 	.word	0x0800244c
 8001ac8:	0800242c 	.word	0x0800242c
 8001acc:	080023ec 	.word	0x080023ec
 8001ad0:	08002452 	.word	0x08002452
 8001ad4:	08002456 	.word	0x08002456
 8001ad8:	00000000 	.word	0x00000000
 8001adc:	0800188f 	.word	0x0800188f

08001ae0 <_printf_common>:
 8001ae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001ae4:	4691      	mov	r9, r2
 8001ae6:	461f      	mov	r7, r3
 8001ae8:	688a      	ldr	r2, [r1, #8]
 8001aea:	690b      	ldr	r3, [r1, #16]
 8001aec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001af0:	4293      	cmp	r3, r2
 8001af2:	bfb8      	it	lt
 8001af4:	4613      	movlt	r3, r2
 8001af6:	f8c9 3000 	str.w	r3, [r9]
 8001afa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001afe:	4606      	mov	r6, r0
 8001b00:	460c      	mov	r4, r1
 8001b02:	b112      	cbz	r2, 8001b0a <_printf_common+0x2a>
 8001b04:	3301      	adds	r3, #1
 8001b06:	f8c9 3000 	str.w	r3, [r9]
 8001b0a:	6823      	ldr	r3, [r4, #0]
 8001b0c:	0699      	lsls	r1, r3, #26
 8001b0e:	bf42      	ittt	mi
 8001b10:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001b14:	3302      	addmi	r3, #2
 8001b16:	f8c9 3000 	strmi.w	r3, [r9]
 8001b1a:	6825      	ldr	r5, [r4, #0]
 8001b1c:	f015 0506 	ands.w	r5, r5, #6
 8001b20:	d107      	bne.n	8001b32 <_printf_common+0x52>
 8001b22:	f104 0a19 	add.w	sl, r4, #25
 8001b26:	68e3      	ldr	r3, [r4, #12]
 8001b28:	f8d9 2000 	ldr.w	r2, [r9]
 8001b2c:	1a9b      	subs	r3, r3, r2
 8001b2e:	42ab      	cmp	r3, r5
 8001b30:	dc28      	bgt.n	8001b84 <_printf_common+0xa4>
 8001b32:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001b36:	6822      	ldr	r2, [r4, #0]
 8001b38:	3300      	adds	r3, #0
 8001b3a:	bf18      	it	ne
 8001b3c:	2301      	movne	r3, #1
 8001b3e:	0692      	lsls	r2, r2, #26
 8001b40:	d42d      	bmi.n	8001b9e <_printf_common+0xbe>
 8001b42:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001b46:	4639      	mov	r1, r7
 8001b48:	4630      	mov	r0, r6
 8001b4a:	47c0      	blx	r8
 8001b4c:	3001      	adds	r0, #1
 8001b4e:	d020      	beq.n	8001b92 <_printf_common+0xb2>
 8001b50:	6823      	ldr	r3, [r4, #0]
 8001b52:	68e5      	ldr	r5, [r4, #12]
 8001b54:	f8d9 2000 	ldr.w	r2, [r9]
 8001b58:	f003 0306 	and.w	r3, r3, #6
 8001b5c:	2b04      	cmp	r3, #4
 8001b5e:	bf08      	it	eq
 8001b60:	1aad      	subeq	r5, r5, r2
 8001b62:	68a3      	ldr	r3, [r4, #8]
 8001b64:	6922      	ldr	r2, [r4, #16]
 8001b66:	bf0c      	ite	eq
 8001b68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001b6c:	2500      	movne	r5, #0
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	bfc4      	itt	gt
 8001b72:	1a9b      	subgt	r3, r3, r2
 8001b74:	18ed      	addgt	r5, r5, r3
 8001b76:	f04f 0900 	mov.w	r9, #0
 8001b7a:	341a      	adds	r4, #26
 8001b7c:	454d      	cmp	r5, r9
 8001b7e:	d11a      	bne.n	8001bb6 <_printf_common+0xd6>
 8001b80:	2000      	movs	r0, #0
 8001b82:	e008      	b.n	8001b96 <_printf_common+0xb6>
 8001b84:	2301      	movs	r3, #1
 8001b86:	4652      	mov	r2, sl
 8001b88:	4639      	mov	r1, r7
 8001b8a:	4630      	mov	r0, r6
 8001b8c:	47c0      	blx	r8
 8001b8e:	3001      	adds	r0, #1
 8001b90:	d103      	bne.n	8001b9a <_printf_common+0xba>
 8001b92:	f04f 30ff 	mov.w	r0, #4294967295
 8001b96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b9a:	3501      	adds	r5, #1
 8001b9c:	e7c3      	b.n	8001b26 <_printf_common+0x46>
 8001b9e:	18e1      	adds	r1, r4, r3
 8001ba0:	1c5a      	adds	r2, r3, #1
 8001ba2:	2030      	movs	r0, #48	; 0x30
 8001ba4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001ba8:	4422      	add	r2, r4
 8001baa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001bae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001bb2:	3302      	adds	r3, #2
 8001bb4:	e7c5      	b.n	8001b42 <_printf_common+0x62>
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	4622      	mov	r2, r4
 8001bba:	4639      	mov	r1, r7
 8001bbc:	4630      	mov	r0, r6
 8001bbe:	47c0      	blx	r8
 8001bc0:	3001      	adds	r0, #1
 8001bc2:	d0e6      	beq.n	8001b92 <_printf_common+0xb2>
 8001bc4:	f109 0901 	add.w	r9, r9, #1
 8001bc8:	e7d8      	b.n	8001b7c <_printf_common+0x9c>
	...

08001bcc <_printf_i>:
 8001bcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001bd0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8001bd4:	460c      	mov	r4, r1
 8001bd6:	7e09      	ldrb	r1, [r1, #24]
 8001bd8:	b085      	sub	sp, #20
 8001bda:	296e      	cmp	r1, #110	; 0x6e
 8001bdc:	4617      	mov	r7, r2
 8001bde:	4606      	mov	r6, r0
 8001be0:	4698      	mov	r8, r3
 8001be2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001be4:	f000 80b3 	beq.w	8001d4e <_printf_i+0x182>
 8001be8:	d822      	bhi.n	8001c30 <_printf_i+0x64>
 8001bea:	2963      	cmp	r1, #99	; 0x63
 8001bec:	d036      	beq.n	8001c5c <_printf_i+0x90>
 8001bee:	d80a      	bhi.n	8001c06 <_printf_i+0x3a>
 8001bf0:	2900      	cmp	r1, #0
 8001bf2:	f000 80b9 	beq.w	8001d68 <_printf_i+0x19c>
 8001bf6:	2958      	cmp	r1, #88	; 0x58
 8001bf8:	f000 8083 	beq.w	8001d02 <_printf_i+0x136>
 8001bfc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001c00:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8001c04:	e032      	b.n	8001c6c <_printf_i+0xa0>
 8001c06:	2964      	cmp	r1, #100	; 0x64
 8001c08:	d001      	beq.n	8001c0e <_printf_i+0x42>
 8001c0a:	2969      	cmp	r1, #105	; 0x69
 8001c0c:	d1f6      	bne.n	8001bfc <_printf_i+0x30>
 8001c0e:	6820      	ldr	r0, [r4, #0]
 8001c10:	6813      	ldr	r3, [r2, #0]
 8001c12:	0605      	lsls	r5, r0, #24
 8001c14:	f103 0104 	add.w	r1, r3, #4
 8001c18:	d52a      	bpl.n	8001c70 <_printf_i+0xa4>
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	6011      	str	r1, [r2, #0]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	da03      	bge.n	8001c2a <_printf_i+0x5e>
 8001c22:	222d      	movs	r2, #45	; 0x2d
 8001c24:	425b      	negs	r3, r3
 8001c26:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8001c2a:	486f      	ldr	r0, [pc, #444]	; (8001de8 <_printf_i+0x21c>)
 8001c2c:	220a      	movs	r2, #10
 8001c2e:	e039      	b.n	8001ca4 <_printf_i+0xd8>
 8001c30:	2973      	cmp	r1, #115	; 0x73
 8001c32:	f000 809d 	beq.w	8001d70 <_printf_i+0x1a4>
 8001c36:	d808      	bhi.n	8001c4a <_printf_i+0x7e>
 8001c38:	296f      	cmp	r1, #111	; 0x6f
 8001c3a:	d020      	beq.n	8001c7e <_printf_i+0xb2>
 8001c3c:	2970      	cmp	r1, #112	; 0x70
 8001c3e:	d1dd      	bne.n	8001bfc <_printf_i+0x30>
 8001c40:	6823      	ldr	r3, [r4, #0]
 8001c42:	f043 0320 	orr.w	r3, r3, #32
 8001c46:	6023      	str	r3, [r4, #0]
 8001c48:	e003      	b.n	8001c52 <_printf_i+0x86>
 8001c4a:	2975      	cmp	r1, #117	; 0x75
 8001c4c:	d017      	beq.n	8001c7e <_printf_i+0xb2>
 8001c4e:	2978      	cmp	r1, #120	; 0x78
 8001c50:	d1d4      	bne.n	8001bfc <_printf_i+0x30>
 8001c52:	2378      	movs	r3, #120	; 0x78
 8001c54:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001c58:	4864      	ldr	r0, [pc, #400]	; (8001dec <_printf_i+0x220>)
 8001c5a:	e055      	b.n	8001d08 <_printf_i+0x13c>
 8001c5c:	6813      	ldr	r3, [r2, #0]
 8001c5e:	1d19      	adds	r1, r3, #4
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	6011      	str	r1, [r2, #0]
 8001c64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001c68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e08c      	b.n	8001d8a <_printf_i+0x1be>
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	6011      	str	r1, [r2, #0]
 8001c74:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001c78:	bf18      	it	ne
 8001c7a:	b21b      	sxthne	r3, r3
 8001c7c:	e7cf      	b.n	8001c1e <_printf_i+0x52>
 8001c7e:	6813      	ldr	r3, [r2, #0]
 8001c80:	6825      	ldr	r5, [r4, #0]
 8001c82:	1d18      	adds	r0, r3, #4
 8001c84:	6010      	str	r0, [r2, #0]
 8001c86:	0628      	lsls	r0, r5, #24
 8001c88:	d501      	bpl.n	8001c8e <_printf_i+0xc2>
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	e002      	b.n	8001c94 <_printf_i+0xc8>
 8001c8e:	0668      	lsls	r0, r5, #25
 8001c90:	d5fb      	bpl.n	8001c8a <_printf_i+0xbe>
 8001c92:	881b      	ldrh	r3, [r3, #0]
 8001c94:	4854      	ldr	r0, [pc, #336]	; (8001de8 <_printf_i+0x21c>)
 8001c96:	296f      	cmp	r1, #111	; 0x6f
 8001c98:	bf14      	ite	ne
 8001c9a:	220a      	movne	r2, #10
 8001c9c:	2208      	moveq	r2, #8
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001ca4:	6865      	ldr	r5, [r4, #4]
 8001ca6:	60a5      	str	r5, [r4, #8]
 8001ca8:	2d00      	cmp	r5, #0
 8001caa:	f2c0 8095 	blt.w	8001dd8 <_printf_i+0x20c>
 8001cae:	6821      	ldr	r1, [r4, #0]
 8001cb0:	f021 0104 	bic.w	r1, r1, #4
 8001cb4:	6021      	str	r1, [r4, #0]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d13d      	bne.n	8001d36 <_printf_i+0x16a>
 8001cba:	2d00      	cmp	r5, #0
 8001cbc:	f040 808e 	bne.w	8001ddc <_printf_i+0x210>
 8001cc0:	4665      	mov	r5, ip
 8001cc2:	2a08      	cmp	r2, #8
 8001cc4:	d10b      	bne.n	8001cde <_printf_i+0x112>
 8001cc6:	6823      	ldr	r3, [r4, #0]
 8001cc8:	07db      	lsls	r3, r3, #31
 8001cca:	d508      	bpl.n	8001cde <_printf_i+0x112>
 8001ccc:	6923      	ldr	r3, [r4, #16]
 8001cce:	6862      	ldr	r2, [r4, #4]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	bfde      	ittt	le
 8001cd4:	2330      	movle	r3, #48	; 0x30
 8001cd6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001cda:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001cde:	ebac 0305 	sub.w	r3, ip, r5
 8001ce2:	6123      	str	r3, [r4, #16]
 8001ce4:	f8cd 8000 	str.w	r8, [sp]
 8001ce8:	463b      	mov	r3, r7
 8001cea:	aa03      	add	r2, sp, #12
 8001cec:	4621      	mov	r1, r4
 8001cee:	4630      	mov	r0, r6
 8001cf0:	f7ff fef6 	bl	8001ae0 <_printf_common>
 8001cf4:	3001      	adds	r0, #1
 8001cf6:	d14d      	bne.n	8001d94 <_printf_i+0x1c8>
 8001cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cfc:	b005      	add	sp, #20
 8001cfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001d02:	4839      	ldr	r0, [pc, #228]	; (8001de8 <_printf_i+0x21c>)
 8001d04:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8001d08:	6813      	ldr	r3, [r2, #0]
 8001d0a:	6821      	ldr	r1, [r4, #0]
 8001d0c:	1d1d      	adds	r5, r3, #4
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	6015      	str	r5, [r2, #0]
 8001d12:	060a      	lsls	r2, r1, #24
 8001d14:	d50b      	bpl.n	8001d2e <_printf_i+0x162>
 8001d16:	07ca      	lsls	r2, r1, #31
 8001d18:	bf44      	itt	mi
 8001d1a:	f041 0120 	orrmi.w	r1, r1, #32
 8001d1e:	6021      	strmi	r1, [r4, #0]
 8001d20:	b91b      	cbnz	r3, 8001d2a <_printf_i+0x15e>
 8001d22:	6822      	ldr	r2, [r4, #0]
 8001d24:	f022 0220 	bic.w	r2, r2, #32
 8001d28:	6022      	str	r2, [r4, #0]
 8001d2a:	2210      	movs	r2, #16
 8001d2c:	e7b7      	b.n	8001c9e <_printf_i+0xd2>
 8001d2e:	064d      	lsls	r5, r1, #25
 8001d30:	bf48      	it	mi
 8001d32:	b29b      	uxthmi	r3, r3
 8001d34:	e7ef      	b.n	8001d16 <_printf_i+0x14a>
 8001d36:	4665      	mov	r5, ip
 8001d38:	fbb3 f1f2 	udiv	r1, r3, r2
 8001d3c:	fb02 3311 	mls	r3, r2, r1, r3
 8001d40:	5cc3      	ldrb	r3, [r0, r3]
 8001d42:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8001d46:	460b      	mov	r3, r1
 8001d48:	2900      	cmp	r1, #0
 8001d4a:	d1f5      	bne.n	8001d38 <_printf_i+0x16c>
 8001d4c:	e7b9      	b.n	8001cc2 <_printf_i+0xf6>
 8001d4e:	6813      	ldr	r3, [r2, #0]
 8001d50:	6825      	ldr	r5, [r4, #0]
 8001d52:	6961      	ldr	r1, [r4, #20]
 8001d54:	1d18      	adds	r0, r3, #4
 8001d56:	6010      	str	r0, [r2, #0]
 8001d58:	0628      	lsls	r0, r5, #24
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	d501      	bpl.n	8001d62 <_printf_i+0x196>
 8001d5e:	6019      	str	r1, [r3, #0]
 8001d60:	e002      	b.n	8001d68 <_printf_i+0x19c>
 8001d62:	066a      	lsls	r2, r5, #25
 8001d64:	d5fb      	bpl.n	8001d5e <_printf_i+0x192>
 8001d66:	8019      	strh	r1, [r3, #0]
 8001d68:	2300      	movs	r3, #0
 8001d6a:	6123      	str	r3, [r4, #16]
 8001d6c:	4665      	mov	r5, ip
 8001d6e:	e7b9      	b.n	8001ce4 <_printf_i+0x118>
 8001d70:	6813      	ldr	r3, [r2, #0]
 8001d72:	1d19      	adds	r1, r3, #4
 8001d74:	6011      	str	r1, [r2, #0]
 8001d76:	681d      	ldr	r5, [r3, #0]
 8001d78:	6862      	ldr	r2, [r4, #4]
 8001d7a:	2100      	movs	r1, #0
 8001d7c:	4628      	mov	r0, r5
 8001d7e:	f7fe fa47 	bl	8000210 <memchr>
 8001d82:	b108      	cbz	r0, 8001d88 <_printf_i+0x1bc>
 8001d84:	1b40      	subs	r0, r0, r5
 8001d86:	6060      	str	r0, [r4, #4]
 8001d88:	6863      	ldr	r3, [r4, #4]
 8001d8a:	6123      	str	r3, [r4, #16]
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001d92:	e7a7      	b.n	8001ce4 <_printf_i+0x118>
 8001d94:	6923      	ldr	r3, [r4, #16]
 8001d96:	462a      	mov	r2, r5
 8001d98:	4639      	mov	r1, r7
 8001d9a:	4630      	mov	r0, r6
 8001d9c:	47c0      	blx	r8
 8001d9e:	3001      	adds	r0, #1
 8001da0:	d0aa      	beq.n	8001cf8 <_printf_i+0x12c>
 8001da2:	6823      	ldr	r3, [r4, #0]
 8001da4:	079b      	lsls	r3, r3, #30
 8001da6:	d413      	bmi.n	8001dd0 <_printf_i+0x204>
 8001da8:	68e0      	ldr	r0, [r4, #12]
 8001daa:	9b03      	ldr	r3, [sp, #12]
 8001dac:	4298      	cmp	r0, r3
 8001dae:	bfb8      	it	lt
 8001db0:	4618      	movlt	r0, r3
 8001db2:	e7a3      	b.n	8001cfc <_printf_i+0x130>
 8001db4:	2301      	movs	r3, #1
 8001db6:	464a      	mov	r2, r9
 8001db8:	4639      	mov	r1, r7
 8001dba:	4630      	mov	r0, r6
 8001dbc:	47c0      	blx	r8
 8001dbe:	3001      	adds	r0, #1
 8001dc0:	d09a      	beq.n	8001cf8 <_printf_i+0x12c>
 8001dc2:	3501      	adds	r5, #1
 8001dc4:	68e3      	ldr	r3, [r4, #12]
 8001dc6:	9a03      	ldr	r2, [sp, #12]
 8001dc8:	1a9b      	subs	r3, r3, r2
 8001dca:	42ab      	cmp	r3, r5
 8001dcc:	dcf2      	bgt.n	8001db4 <_printf_i+0x1e8>
 8001dce:	e7eb      	b.n	8001da8 <_printf_i+0x1dc>
 8001dd0:	2500      	movs	r5, #0
 8001dd2:	f104 0919 	add.w	r9, r4, #25
 8001dd6:	e7f5      	b.n	8001dc4 <_printf_i+0x1f8>
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d1ac      	bne.n	8001d36 <_printf_i+0x16a>
 8001ddc:	7803      	ldrb	r3, [r0, #0]
 8001dde:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001de2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001de6:	e76c      	b.n	8001cc2 <_printf_i+0xf6>
 8001de8:	0800245d 	.word	0x0800245d
 8001dec:	0800246e 	.word	0x0800246e

08001df0 <_sbrk_r>:
 8001df0:	b538      	push	{r3, r4, r5, lr}
 8001df2:	4c06      	ldr	r4, [pc, #24]	; (8001e0c <_sbrk_r+0x1c>)
 8001df4:	2300      	movs	r3, #0
 8001df6:	4605      	mov	r5, r0
 8001df8:	4608      	mov	r0, r1
 8001dfa:	6023      	str	r3, [r4, #0]
 8001dfc:	f7fe fd40 	bl	8000880 <_sbrk>
 8001e00:	1c43      	adds	r3, r0, #1
 8001e02:	d102      	bne.n	8001e0a <_sbrk_r+0x1a>
 8001e04:	6823      	ldr	r3, [r4, #0]
 8001e06:	b103      	cbz	r3, 8001e0a <_sbrk_r+0x1a>
 8001e08:	602b      	str	r3, [r5, #0]
 8001e0a:	bd38      	pop	{r3, r4, r5, pc}
 8001e0c:	200000a0 	.word	0x200000a0

08001e10 <__sread>:
 8001e10:	b510      	push	{r4, lr}
 8001e12:	460c      	mov	r4, r1
 8001e14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e18:	f000 fa96 	bl	8002348 <_read_r>
 8001e1c:	2800      	cmp	r0, #0
 8001e1e:	bfab      	itete	ge
 8001e20:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001e22:	89a3      	ldrhlt	r3, [r4, #12]
 8001e24:	181b      	addge	r3, r3, r0
 8001e26:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001e2a:	bfac      	ite	ge
 8001e2c:	6563      	strge	r3, [r4, #84]	; 0x54
 8001e2e:	81a3      	strhlt	r3, [r4, #12]
 8001e30:	bd10      	pop	{r4, pc}

08001e32 <__swrite>:
 8001e32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e36:	461f      	mov	r7, r3
 8001e38:	898b      	ldrh	r3, [r1, #12]
 8001e3a:	05db      	lsls	r3, r3, #23
 8001e3c:	4605      	mov	r5, r0
 8001e3e:	460c      	mov	r4, r1
 8001e40:	4616      	mov	r6, r2
 8001e42:	d505      	bpl.n	8001e50 <__swrite+0x1e>
 8001e44:	2302      	movs	r3, #2
 8001e46:	2200      	movs	r2, #0
 8001e48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e4c:	f000 f9b6 	bl	80021bc <_lseek_r>
 8001e50:	89a3      	ldrh	r3, [r4, #12]
 8001e52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001e56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001e5a:	81a3      	strh	r3, [r4, #12]
 8001e5c:	4632      	mov	r2, r6
 8001e5e:	463b      	mov	r3, r7
 8001e60:	4628      	mov	r0, r5
 8001e62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001e66:	f000 b869 	b.w	8001f3c <_write_r>

08001e6a <__sseek>:
 8001e6a:	b510      	push	{r4, lr}
 8001e6c:	460c      	mov	r4, r1
 8001e6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e72:	f000 f9a3 	bl	80021bc <_lseek_r>
 8001e76:	1c43      	adds	r3, r0, #1
 8001e78:	89a3      	ldrh	r3, [r4, #12]
 8001e7a:	bf15      	itete	ne
 8001e7c:	6560      	strne	r0, [r4, #84]	; 0x54
 8001e7e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001e82:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001e86:	81a3      	strheq	r3, [r4, #12]
 8001e88:	bf18      	it	ne
 8001e8a:	81a3      	strhne	r3, [r4, #12]
 8001e8c:	bd10      	pop	{r4, pc}

08001e8e <__sclose>:
 8001e8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e92:	f000 b8d3 	b.w	800203c <_close_r>
	...

08001e98 <__swbuf_r>:
 8001e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e9a:	460e      	mov	r6, r1
 8001e9c:	4614      	mov	r4, r2
 8001e9e:	4605      	mov	r5, r0
 8001ea0:	b118      	cbz	r0, 8001eaa <__swbuf_r+0x12>
 8001ea2:	6983      	ldr	r3, [r0, #24]
 8001ea4:	b90b      	cbnz	r3, 8001eaa <__swbuf_r+0x12>
 8001ea6:	f7ff fbf7 	bl	8001698 <__sinit>
 8001eaa:	4b21      	ldr	r3, [pc, #132]	; (8001f30 <__swbuf_r+0x98>)
 8001eac:	429c      	cmp	r4, r3
 8001eae:	d12a      	bne.n	8001f06 <__swbuf_r+0x6e>
 8001eb0:	686c      	ldr	r4, [r5, #4]
 8001eb2:	69a3      	ldr	r3, [r4, #24]
 8001eb4:	60a3      	str	r3, [r4, #8]
 8001eb6:	89a3      	ldrh	r3, [r4, #12]
 8001eb8:	071a      	lsls	r2, r3, #28
 8001eba:	d52e      	bpl.n	8001f1a <__swbuf_r+0x82>
 8001ebc:	6923      	ldr	r3, [r4, #16]
 8001ebe:	b363      	cbz	r3, 8001f1a <__swbuf_r+0x82>
 8001ec0:	6923      	ldr	r3, [r4, #16]
 8001ec2:	6820      	ldr	r0, [r4, #0]
 8001ec4:	1ac0      	subs	r0, r0, r3
 8001ec6:	6963      	ldr	r3, [r4, #20]
 8001ec8:	b2f6      	uxtb	r6, r6
 8001eca:	4283      	cmp	r3, r0
 8001ecc:	4637      	mov	r7, r6
 8001ece:	dc04      	bgt.n	8001eda <__swbuf_r+0x42>
 8001ed0:	4621      	mov	r1, r4
 8001ed2:	4628      	mov	r0, r5
 8001ed4:	f000 f948 	bl	8002168 <_fflush_r>
 8001ed8:	bb28      	cbnz	r0, 8001f26 <__swbuf_r+0x8e>
 8001eda:	68a3      	ldr	r3, [r4, #8]
 8001edc:	3b01      	subs	r3, #1
 8001ede:	60a3      	str	r3, [r4, #8]
 8001ee0:	6823      	ldr	r3, [r4, #0]
 8001ee2:	1c5a      	adds	r2, r3, #1
 8001ee4:	6022      	str	r2, [r4, #0]
 8001ee6:	701e      	strb	r6, [r3, #0]
 8001ee8:	6963      	ldr	r3, [r4, #20]
 8001eea:	3001      	adds	r0, #1
 8001eec:	4283      	cmp	r3, r0
 8001eee:	d004      	beq.n	8001efa <__swbuf_r+0x62>
 8001ef0:	89a3      	ldrh	r3, [r4, #12]
 8001ef2:	07db      	lsls	r3, r3, #31
 8001ef4:	d519      	bpl.n	8001f2a <__swbuf_r+0x92>
 8001ef6:	2e0a      	cmp	r6, #10
 8001ef8:	d117      	bne.n	8001f2a <__swbuf_r+0x92>
 8001efa:	4621      	mov	r1, r4
 8001efc:	4628      	mov	r0, r5
 8001efe:	f000 f933 	bl	8002168 <_fflush_r>
 8001f02:	b190      	cbz	r0, 8001f2a <__swbuf_r+0x92>
 8001f04:	e00f      	b.n	8001f26 <__swbuf_r+0x8e>
 8001f06:	4b0b      	ldr	r3, [pc, #44]	; (8001f34 <__swbuf_r+0x9c>)
 8001f08:	429c      	cmp	r4, r3
 8001f0a:	d101      	bne.n	8001f10 <__swbuf_r+0x78>
 8001f0c:	68ac      	ldr	r4, [r5, #8]
 8001f0e:	e7d0      	b.n	8001eb2 <__swbuf_r+0x1a>
 8001f10:	4b09      	ldr	r3, [pc, #36]	; (8001f38 <__swbuf_r+0xa0>)
 8001f12:	429c      	cmp	r4, r3
 8001f14:	bf08      	it	eq
 8001f16:	68ec      	ldreq	r4, [r5, #12]
 8001f18:	e7cb      	b.n	8001eb2 <__swbuf_r+0x1a>
 8001f1a:	4621      	mov	r1, r4
 8001f1c:	4628      	mov	r0, r5
 8001f1e:	f000 f81f 	bl	8001f60 <__swsetup_r>
 8001f22:	2800      	cmp	r0, #0
 8001f24:	d0cc      	beq.n	8001ec0 <__swbuf_r+0x28>
 8001f26:	f04f 37ff 	mov.w	r7, #4294967295
 8001f2a:	4638      	mov	r0, r7
 8001f2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	0800240c 	.word	0x0800240c
 8001f34:	0800242c 	.word	0x0800242c
 8001f38:	080023ec 	.word	0x080023ec

08001f3c <_write_r>:
 8001f3c:	b538      	push	{r3, r4, r5, lr}
 8001f3e:	4c07      	ldr	r4, [pc, #28]	; (8001f5c <_write_r+0x20>)
 8001f40:	4605      	mov	r5, r0
 8001f42:	4608      	mov	r0, r1
 8001f44:	4611      	mov	r1, r2
 8001f46:	2200      	movs	r2, #0
 8001f48:	6022      	str	r2, [r4, #0]
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	f7fe fb57 	bl	80005fe <_write>
 8001f50:	1c43      	adds	r3, r0, #1
 8001f52:	d102      	bne.n	8001f5a <_write_r+0x1e>
 8001f54:	6823      	ldr	r3, [r4, #0]
 8001f56:	b103      	cbz	r3, 8001f5a <_write_r+0x1e>
 8001f58:	602b      	str	r3, [r5, #0]
 8001f5a:	bd38      	pop	{r3, r4, r5, pc}
 8001f5c:	200000a0 	.word	0x200000a0

08001f60 <__swsetup_r>:
 8001f60:	4b32      	ldr	r3, [pc, #200]	; (800202c <__swsetup_r+0xcc>)
 8001f62:	b570      	push	{r4, r5, r6, lr}
 8001f64:	681d      	ldr	r5, [r3, #0]
 8001f66:	4606      	mov	r6, r0
 8001f68:	460c      	mov	r4, r1
 8001f6a:	b125      	cbz	r5, 8001f76 <__swsetup_r+0x16>
 8001f6c:	69ab      	ldr	r3, [r5, #24]
 8001f6e:	b913      	cbnz	r3, 8001f76 <__swsetup_r+0x16>
 8001f70:	4628      	mov	r0, r5
 8001f72:	f7ff fb91 	bl	8001698 <__sinit>
 8001f76:	4b2e      	ldr	r3, [pc, #184]	; (8002030 <__swsetup_r+0xd0>)
 8001f78:	429c      	cmp	r4, r3
 8001f7a:	d10f      	bne.n	8001f9c <__swsetup_r+0x3c>
 8001f7c:	686c      	ldr	r4, [r5, #4]
 8001f7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001f82:	b29a      	uxth	r2, r3
 8001f84:	0715      	lsls	r5, r2, #28
 8001f86:	d42c      	bmi.n	8001fe2 <__swsetup_r+0x82>
 8001f88:	06d0      	lsls	r0, r2, #27
 8001f8a:	d411      	bmi.n	8001fb0 <__swsetup_r+0x50>
 8001f8c:	2209      	movs	r2, #9
 8001f8e:	6032      	str	r2, [r6, #0]
 8001f90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f94:	81a3      	strh	r3, [r4, #12]
 8001f96:	f04f 30ff 	mov.w	r0, #4294967295
 8001f9a:	e03e      	b.n	800201a <__swsetup_r+0xba>
 8001f9c:	4b25      	ldr	r3, [pc, #148]	; (8002034 <__swsetup_r+0xd4>)
 8001f9e:	429c      	cmp	r4, r3
 8001fa0:	d101      	bne.n	8001fa6 <__swsetup_r+0x46>
 8001fa2:	68ac      	ldr	r4, [r5, #8]
 8001fa4:	e7eb      	b.n	8001f7e <__swsetup_r+0x1e>
 8001fa6:	4b24      	ldr	r3, [pc, #144]	; (8002038 <__swsetup_r+0xd8>)
 8001fa8:	429c      	cmp	r4, r3
 8001faa:	bf08      	it	eq
 8001fac:	68ec      	ldreq	r4, [r5, #12]
 8001fae:	e7e6      	b.n	8001f7e <__swsetup_r+0x1e>
 8001fb0:	0751      	lsls	r1, r2, #29
 8001fb2:	d512      	bpl.n	8001fda <__swsetup_r+0x7a>
 8001fb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001fb6:	b141      	cbz	r1, 8001fca <__swsetup_r+0x6a>
 8001fb8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001fbc:	4299      	cmp	r1, r3
 8001fbe:	d002      	beq.n	8001fc6 <__swsetup_r+0x66>
 8001fc0:	4630      	mov	r0, r6
 8001fc2:	f000 f973 	bl	80022ac <_free_r>
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	6363      	str	r3, [r4, #52]	; 0x34
 8001fca:	89a3      	ldrh	r3, [r4, #12]
 8001fcc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001fd0:	81a3      	strh	r3, [r4, #12]
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	6063      	str	r3, [r4, #4]
 8001fd6:	6923      	ldr	r3, [r4, #16]
 8001fd8:	6023      	str	r3, [r4, #0]
 8001fda:	89a3      	ldrh	r3, [r4, #12]
 8001fdc:	f043 0308 	orr.w	r3, r3, #8
 8001fe0:	81a3      	strh	r3, [r4, #12]
 8001fe2:	6923      	ldr	r3, [r4, #16]
 8001fe4:	b94b      	cbnz	r3, 8001ffa <__swsetup_r+0x9a>
 8001fe6:	89a3      	ldrh	r3, [r4, #12]
 8001fe8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001fec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ff0:	d003      	beq.n	8001ffa <__swsetup_r+0x9a>
 8001ff2:	4621      	mov	r1, r4
 8001ff4:	4630      	mov	r0, r6
 8001ff6:	f000 f917 	bl	8002228 <__smakebuf_r>
 8001ffa:	89a2      	ldrh	r2, [r4, #12]
 8001ffc:	f012 0301 	ands.w	r3, r2, #1
 8002000:	d00c      	beq.n	800201c <__swsetup_r+0xbc>
 8002002:	2300      	movs	r3, #0
 8002004:	60a3      	str	r3, [r4, #8]
 8002006:	6963      	ldr	r3, [r4, #20]
 8002008:	425b      	negs	r3, r3
 800200a:	61a3      	str	r3, [r4, #24]
 800200c:	6923      	ldr	r3, [r4, #16]
 800200e:	b953      	cbnz	r3, 8002026 <__swsetup_r+0xc6>
 8002010:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002014:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8002018:	d1ba      	bne.n	8001f90 <__swsetup_r+0x30>
 800201a:	bd70      	pop	{r4, r5, r6, pc}
 800201c:	0792      	lsls	r2, r2, #30
 800201e:	bf58      	it	pl
 8002020:	6963      	ldrpl	r3, [r4, #20]
 8002022:	60a3      	str	r3, [r4, #8]
 8002024:	e7f2      	b.n	800200c <__swsetup_r+0xac>
 8002026:	2000      	movs	r0, #0
 8002028:	e7f7      	b.n	800201a <__swsetup_r+0xba>
 800202a:	bf00      	nop
 800202c:	2000000c 	.word	0x2000000c
 8002030:	0800240c 	.word	0x0800240c
 8002034:	0800242c 	.word	0x0800242c
 8002038:	080023ec 	.word	0x080023ec

0800203c <_close_r>:
 800203c:	b538      	push	{r3, r4, r5, lr}
 800203e:	4c06      	ldr	r4, [pc, #24]	; (8002058 <_close_r+0x1c>)
 8002040:	2300      	movs	r3, #0
 8002042:	4605      	mov	r5, r0
 8002044:	4608      	mov	r0, r1
 8002046:	6023      	str	r3, [r4, #0]
 8002048:	f7fe fbe5 	bl	8000816 <_close>
 800204c:	1c43      	adds	r3, r0, #1
 800204e:	d102      	bne.n	8002056 <_close_r+0x1a>
 8002050:	6823      	ldr	r3, [r4, #0]
 8002052:	b103      	cbz	r3, 8002056 <_close_r+0x1a>
 8002054:	602b      	str	r3, [r5, #0]
 8002056:	bd38      	pop	{r3, r4, r5, pc}
 8002058:	200000a0 	.word	0x200000a0

0800205c <__sflush_r>:
 800205c:	898a      	ldrh	r2, [r1, #12]
 800205e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002062:	4605      	mov	r5, r0
 8002064:	0710      	lsls	r0, r2, #28
 8002066:	460c      	mov	r4, r1
 8002068:	d458      	bmi.n	800211c <__sflush_r+0xc0>
 800206a:	684b      	ldr	r3, [r1, #4]
 800206c:	2b00      	cmp	r3, #0
 800206e:	dc05      	bgt.n	800207c <__sflush_r+0x20>
 8002070:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002072:	2b00      	cmp	r3, #0
 8002074:	dc02      	bgt.n	800207c <__sflush_r+0x20>
 8002076:	2000      	movs	r0, #0
 8002078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800207c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800207e:	2e00      	cmp	r6, #0
 8002080:	d0f9      	beq.n	8002076 <__sflush_r+0x1a>
 8002082:	2300      	movs	r3, #0
 8002084:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002088:	682f      	ldr	r7, [r5, #0]
 800208a:	6a21      	ldr	r1, [r4, #32]
 800208c:	602b      	str	r3, [r5, #0]
 800208e:	d032      	beq.n	80020f6 <__sflush_r+0x9a>
 8002090:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002092:	89a3      	ldrh	r3, [r4, #12]
 8002094:	075a      	lsls	r2, r3, #29
 8002096:	d505      	bpl.n	80020a4 <__sflush_r+0x48>
 8002098:	6863      	ldr	r3, [r4, #4]
 800209a:	1ac0      	subs	r0, r0, r3
 800209c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800209e:	b10b      	cbz	r3, 80020a4 <__sflush_r+0x48>
 80020a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80020a2:	1ac0      	subs	r0, r0, r3
 80020a4:	2300      	movs	r3, #0
 80020a6:	4602      	mov	r2, r0
 80020a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80020aa:	6a21      	ldr	r1, [r4, #32]
 80020ac:	4628      	mov	r0, r5
 80020ae:	47b0      	blx	r6
 80020b0:	1c43      	adds	r3, r0, #1
 80020b2:	89a3      	ldrh	r3, [r4, #12]
 80020b4:	d106      	bne.n	80020c4 <__sflush_r+0x68>
 80020b6:	6829      	ldr	r1, [r5, #0]
 80020b8:	291d      	cmp	r1, #29
 80020ba:	d848      	bhi.n	800214e <__sflush_r+0xf2>
 80020bc:	4a29      	ldr	r2, [pc, #164]	; (8002164 <__sflush_r+0x108>)
 80020be:	40ca      	lsrs	r2, r1
 80020c0:	07d6      	lsls	r6, r2, #31
 80020c2:	d544      	bpl.n	800214e <__sflush_r+0xf2>
 80020c4:	2200      	movs	r2, #0
 80020c6:	6062      	str	r2, [r4, #4]
 80020c8:	04d9      	lsls	r1, r3, #19
 80020ca:	6922      	ldr	r2, [r4, #16]
 80020cc:	6022      	str	r2, [r4, #0]
 80020ce:	d504      	bpl.n	80020da <__sflush_r+0x7e>
 80020d0:	1c42      	adds	r2, r0, #1
 80020d2:	d101      	bne.n	80020d8 <__sflush_r+0x7c>
 80020d4:	682b      	ldr	r3, [r5, #0]
 80020d6:	b903      	cbnz	r3, 80020da <__sflush_r+0x7e>
 80020d8:	6560      	str	r0, [r4, #84]	; 0x54
 80020da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80020dc:	602f      	str	r7, [r5, #0]
 80020de:	2900      	cmp	r1, #0
 80020e0:	d0c9      	beq.n	8002076 <__sflush_r+0x1a>
 80020e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80020e6:	4299      	cmp	r1, r3
 80020e8:	d002      	beq.n	80020f0 <__sflush_r+0x94>
 80020ea:	4628      	mov	r0, r5
 80020ec:	f000 f8de 	bl	80022ac <_free_r>
 80020f0:	2000      	movs	r0, #0
 80020f2:	6360      	str	r0, [r4, #52]	; 0x34
 80020f4:	e7c0      	b.n	8002078 <__sflush_r+0x1c>
 80020f6:	2301      	movs	r3, #1
 80020f8:	4628      	mov	r0, r5
 80020fa:	47b0      	blx	r6
 80020fc:	1c41      	adds	r1, r0, #1
 80020fe:	d1c8      	bne.n	8002092 <__sflush_r+0x36>
 8002100:	682b      	ldr	r3, [r5, #0]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d0c5      	beq.n	8002092 <__sflush_r+0x36>
 8002106:	2b1d      	cmp	r3, #29
 8002108:	d001      	beq.n	800210e <__sflush_r+0xb2>
 800210a:	2b16      	cmp	r3, #22
 800210c:	d101      	bne.n	8002112 <__sflush_r+0xb6>
 800210e:	602f      	str	r7, [r5, #0]
 8002110:	e7b1      	b.n	8002076 <__sflush_r+0x1a>
 8002112:	89a3      	ldrh	r3, [r4, #12]
 8002114:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002118:	81a3      	strh	r3, [r4, #12]
 800211a:	e7ad      	b.n	8002078 <__sflush_r+0x1c>
 800211c:	690f      	ldr	r7, [r1, #16]
 800211e:	2f00      	cmp	r7, #0
 8002120:	d0a9      	beq.n	8002076 <__sflush_r+0x1a>
 8002122:	0793      	lsls	r3, r2, #30
 8002124:	680e      	ldr	r6, [r1, #0]
 8002126:	bf08      	it	eq
 8002128:	694b      	ldreq	r3, [r1, #20]
 800212a:	600f      	str	r7, [r1, #0]
 800212c:	bf18      	it	ne
 800212e:	2300      	movne	r3, #0
 8002130:	eba6 0807 	sub.w	r8, r6, r7
 8002134:	608b      	str	r3, [r1, #8]
 8002136:	f1b8 0f00 	cmp.w	r8, #0
 800213a:	dd9c      	ble.n	8002076 <__sflush_r+0x1a>
 800213c:	4643      	mov	r3, r8
 800213e:	463a      	mov	r2, r7
 8002140:	6a21      	ldr	r1, [r4, #32]
 8002142:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002144:	4628      	mov	r0, r5
 8002146:	47b0      	blx	r6
 8002148:	2800      	cmp	r0, #0
 800214a:	dc06      	bgt.n	800215a <__sflush_r+0xfe>
 800214c:	89a3      	ldrh	r3, [r4, #12]
 800214e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002152:	81a3      	strh	r3, [r4, #12]
 8002154:	f04f 30ff 	mov.w	r0, #4294967295
 8002158:	e78e      	b.n	8002078 <__sflush_r+0x1c>
 800215a:	4407      	add	r7, r0
 800215c:	eba8 0800 	sub.w	r8, r8, r0
 8002160:	e7e9      	b.n	8002136 <__sflush_r+0xda>
 8002162:	bf00      	nop
 8002164:	20400001 	.word	0x20400001

08002168 <_fflush_r>:
 8002168:	b538      	push	{r3, r4, r5, lr}
 800216a:	690b      	ldr	r3, [r1, #16]
 800216c:	4605      	mov	r5, r0
 800216e:	460c      	mov	r4, r1
 8002170:	b1db      	cbz	r3, 80021aa <_fflush_r+0x42>
 8002172:	b118      	cbz	r0, 800217c <_fflush_r+0x14>
 8002174:	6983      	ldr	r3, [r0, #24]
 8002176:	b90b      	cbnz	r3, 800217c <_fflush_r+0x14>
 8002178:	f7ff fa8e 	bl	8001698 <__sinit>
 800217c:	4b0c      	ldr	r3, [pc, #48]	; (80021b0 <_fflush_r+0x48>)
 800217e:	429c      	cmp	r4, r3
 8002180:	d109      	bne.n	8002196 <_fflush_r+0x2e>
 8002182:	686c      	ldr	r4, [r5, #4]
 8002184:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002188:	b17b      	cbz	r3, 80021aa <_fflush_r+0x42>
 800218a:	4621      	mov	r1, r4
 800218c:	4628      	mov	r0, r5
 800218e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002192:	f7ff bf63 	b.w	800205c <__sflush_r>
 8002196:	4b07      	ldr	r3, [pc, #28]	; (80021b4 <_fflush_r+0x4c>)
 8002198:	429c      	cmp	r4, r3
 800219a:	d101      	bne.n	80021a0 <_fflush_r+0x38>
 800219c:	68ac      	ldr	r4, [r5, #8]
 800219e:	e7f1      	b.n	8002184 <_fflush_r+0x1c>
 80021a0:	4b05      	ldr	r3, [pc, #20]	; (80021b8 <_fflush_r+0x50>)
 80021a2:	429c      	cmp	r4, r3
 80021a4:	bf08      	it	eq
 80021a6:	68ec      	ldreq	r4, [r5, #12]
 80021a8:	e7ec      	b.n	8002184 <_fflush_r+0x1c>
 80021aa:	2000      	movs	r0, #0
 80021ac:	bd38      	pop	{r3, r4, r5, pc}
 80021ae:	bf00      	nop
 80021b0:	0800240c 	.word	0x0800240c
 80021b4:	0800242c 	.word	0x0800242c
 80021b8:	080023ec 	.word	0x080023ec

080021bc <_lseek_r>:
 80021bc:	b538      	push	{r3, r4, r5, lr}
 80021be:	4c07      	ldr	r4, [pc, #28]	; (80021dc <_lseek_r+0x20>)
 80021c0:	4605      	mov	r5, r0
 80021c2:	4608      	mov	r0, r1
 80021c4:	4611      	mov	r1, r2
 80021c6:	2200      	movs	r2, #0
 80021c8:	6022      	str	r2, [r4, #0]
 80021ca:	461a      	mov	r2, r3
 80021cc:	f7fe fb4a 	bl	8000864 <_lseek>
 80021d0:	1c43      	adds	r3, r0, #1
 80021d2:	d102      	bne.n	80021da <_lseek_r+0x1e>
 80021d4:	6823      	ldr	r3, [r4, #0]
 80021d6:	b103      	cbz	r3, 80021da <_lseek_r+0x1e>
 80021d8:	602b      	str	r3, [r5, #0]
 80021da:	bd38      	pop	{r3, r4, r5, pc}
 80021dc:	200000a0 	.word	0x200000a0

080021e0 <__swhatbuf_r>:
 80021e0:	b570      	push	{r4, r5, r6, lr}
 80021e2:	460e      	mov	r6, r1
 80021e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80021e8:	2900      	cmp	r1, #0
 80021ea:	b096      	sub	sp, #88	; 0x58
 80021ec:	4614      	mov	r4, r2
 80021ee:	461d      	mov	r5, r3
 80021f0:	da07      	bge.n	8002202 <__swhatbuf_r+0x22>
 80021f2:	2300      	movs	r3, #0
 80021f4:	602b      	str	r3, [r5, #0]
 80021f6:	89b3      	ldrh	r3, [r6, #12]
 80021f8:	061a      	lsls	r2, r3, #24
 80021fa:	d410      	bmi.n	800221e <__swhatbuf_r+0x3e>
 80021fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002200:	e00e      	b.n	8002220 <__swhatbuf_r+0x40>
 8002202:	466a      	mov	r2, sp
 8002204:	f000 f8b2 	bl	800236c <_fstat_r>
 8002208:	2800      	cmp	r0, #0
 800220a:	dbf2      	blt.n	80021f2 <__swhatbuf_r+0x12>
 800220c:	9a01      	ldr	r2, [sp, #4]
 800220e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002212:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002216:	425a      	negs	r2, r3
 8002218:	415a      	adcs	r2, r3
 800221a:	602a      	str	r2, [r5, #0]
 800221c:	e7ee      	b.n	80021fc <__swhatbuf_r+0x1c>
 800221e:	2340      	movs	r3, #64	; 0x40
 8002220:	2000      	movs	r0, #0
 8002222:	6023      	str	r3, [r4, #0]
 8002224:	b016      	add	sp, #88	; 0x58
 8002226:	bd70      	pop	{r4, r5, r6, pc}

08002228 <__smakebuf_r>:
 8002228:	898b      	ldrh	r3, [r1, #12]
 800222a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800222c:	079d      	lsls	r5, r3, #30
 800222e:	4606      	mov	r6, r0
 8002230:	460c      	mov	r4, r1
 8002232:	d507      	bpl.n	8002244 <__smakebuf_r+0x1c>
 8002234:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002238:	6023      	str	r3, [r4, #0]
 800223a:	6123      	str	r3, [r4, #16]
 800223c:	2301      	movs	r3, #1
 800223e:	6163      	str	r3, [r4, #20]
 8002240:	b002      	add	sp, #8
 8002242:	bd70      	pop	{r4, r5, r6, pc}
 8002244:	ab01      	add	r3, sp, #4
 8002246:	466a      	mov	r2, sp
 8002248:	f7ff ffca 	bl	80021e0 <__swhatbuf_r>
 800224c:	9900      	ldr	r1, [sp, #0]
 800224e:	4605      	mov	r5, r0
 8002250:	4630      	mov	r0, r6
 8002252:	f7ff faab 	bl	80017ac <_malloc_r>
 8002256:	b948      	cbnz	r0, 800226c <__smakebuf_r+0x44>
 8002258:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800225c:	059a      	lsls	r2, r3, #22
 800225e:	d4ef      	bmi.n	8002240 <__smakebuf_r+0x18>
 8002260:	f023 0303 	bic.w	r3, r3, #3
 8002264:	f043 0302 	orr.w	r3, r3, #2
 8002268:	81a3      	strh	r3, [r4, #12]
 800226a:	e7e3      	b.n	8002234 <__smakebuf_r+0xc>
 800226c:	4b0d      	ldr	r3, [pc, #52]	; (80022a4 <__smakebuf_r+0x7c>)
 800226e:	62b3      	str	r3, [r6, #40]	; 0x28
 8002270:	89a3      	ldrh	r3, [r4, #12]
 8002272:	6020      	str	r0, [r4, #0]
 8002274:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002278:	81a3      	strh	r3, [r4, #12]
 800227a:	9b00      	ldr	r3, [sp, #0]
 800227c:	6163      	str	r3, [r4, #20]
 800227e:	9b01      	ldr	r3, [sp, #4]
 8002280:	6120      	str	r0, [r4, #16]
 8002282:	b15b      	cbz	r3, 800229c <__smakebuf_r+0x74>
 8002284:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002288:	4630      	mov	r0, r6
 800228a:	f000 f881 	bl	8002390 <_isatty_r>
 800228e:	b128      	cbz	r0, 800229c <__smakebuf_r+0x74>
 8002290:	89a3      	ldrh	r3, [r4, #12]
 8002292:	f023 0303 	bic.w	r3, r3, #3
 8002296:	f043 0301 	orr.w	r3, r3, #1
 800229a:	81a3      	strh	r3, [r4, #12]
 800229c:	89a3      	ldrh	r3, [r4, #12]
 800229e:	431d      	orrs	r5, r3
 80022a0:	81a5      	strh	r5, [r4, #12]
 80022a2:	e7cd      	b.n	8002240 <__smakebuf_r+0x18>
 80022a4:	08001661 	.word	0x08001661

080022a8 <__malloc_lock>:
 80022a8:	4770      	bx	lr

080022aa <__malloc_unlock>:
 80022aa:	4770      	bx	lr

080022ac <_free_r>:
 80022ac:	b538      	push	{r3, r4, r5, lr}
 80022ae:	4605      	mov	r5, r0
 80022b0:	2900      	cmp	r1, #0
 80022b2:	d045      	beq.n	8002340 <_free_r+0x94>
 80022b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80022b8:	1f0c      	subs	r4, r1, #4
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	bfb8      	it	lt
 80022be:	18e4      	addlt	r4, r4, r3
 80022c0:	f7ff fff2 	bl	80022a8 <__malloc_lock>
 80022c4:	4a1f      	ldr	r2, [pc, #124]	; (8002344 <_free_r+0x98>)
 80022c6:	6813      	ldr	r3, [r2, #0]
 80022c8:	4610      	mov	r0, r2
 80022ca:	b933      	cbnz	r3, 80022da <_free_r+0x2e>
 80022cc:	6063      	str	r3, [r4, #4]
 80022ce:	6014      	str	r4, [r2, #0]
 80022d0:	4628      	mov	r0, r5
 80022d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80022d6:	f7ff bfe8 	b.w	80022aa <__malloc_unlock>
 80022da:	42a3      	cmp	r3, r4
 80022dc:	d90c      	bls.n	80022f8 <_free_r+0x4c>
 80022de:	6821      	ldr	r1, [r4, #0]
 80022e0:	1862      	adds	r2, r4, r1
 80022e2:	4293      	cmp	r3, r2
 80022e4:	bf04      	itt	eq
 80022e6:	681a      	ldreq	r2, [r3, #0]
 80022e8:	685b      	ldreq	r3, [r3, #4]
 80022ea:	6063      	str	r3, [r4, #4]
 80022ec:	bf04      	itt	eq
 80022ee:	1852      	addeq	r2, r2, r1
 80022f0:	6022      	streq	r2, [r4, #0]
 80022f2:	6004      	str	r4, [r0, #0]
 80022f4:	e7ec      	b.n	80022d0 <_free_r+0x24>
 80022f6:	4613      	mov	r3, r2
 80022f8:	685a      	ldr	r2, [r3, #4]
 80022fa:	b10a      	cbz	r2, 8002300 <_free_r+0x54>
 80022fc:	42a2      	cmp	r2, r4
 80022fe:	d9fa      	bls.n	80022f6 <_free_r+0x4a>
 8002300:	6819      	ldr	r1, [r3, #0]
 8002302:	1858      	adds	r0, r3, r1
 8002304:	42a0      	cmp	r0, r4
 8002306:	d10b      	bne.n	8002320 <_free_r+0x74>
 8002308:	6820      	ldr	r0, [r4, #0]
 800230a:	4401      	add	r1, r0
 800230c:	1858      	adds	r0, r3, r1
 800230e:	4282      	cmp	r2, r0
 8002310:	6019      	str	r1, [r3, #0]
 8002312:	d1dd      	bne.n	80022d0 <_free_r+0x24>
 8002314:	6810      	ldr	r0, [r2, #0]
 8002316:	6852      	ldr	r2, [r2, #4]
 8002318:	605a      	str	r2, [r3, #4]
 800231a:	4401      	add	r1, r0
 800231c:	6019      	str	r1, [r3, #0]
 800231e:	e7d7      	b.n	80022d0 <_free_r+0x24>
 8002320:	d902      	bls.n	8002328 <_free_r+0x7c>
 8002322:	230c      	movs	r3, #12
 8002324:	602b      	str	r3, [r5, #0]
 8002326:	e7d3      	b.n	80022d0 <_free_r+0x24>
 8002328:	6820      	ldr	r0, [r4, #0]
 800232a:	1821      	adds	r1, r4, r0
 800232c:	428a      	cmp	r2, r1
 800232e:	bf04      	itt	eq
 8002330:	6811      	ldreq	r1, [r2, #0]
 8002332:	6852      	ldreq	r2, [r2, #4]
 8002334:	6062      	str	r2, [r4, #4]
 8002336:	bf04      	itt	eq
 8002338:	1809      	addeq	r1, r1, r0
 800233a:	6021      	streq	r1, [r4, #0]
 800233c:	605c      	str	r4, [r3, #4]
 800233e:	e7c7      	b.n	80022d0 <_free_r+0x24>
 8002340:	bd38      	pop	{r3, r4, r5, pc}
 8002342:	bf00      	nop
 8002344:	20000094 	.word	0x20000094

08002348 <_read_r>:
 8002348:	b538      	push	{r3, r4, r5, lr}
 800234a:	4c07      	ldr	r4, [pc, #28]	; (8002368 <_read_r+0x20>)
 800234c:	4605      	mov	r5, r0
 800234e:	4608      	mov	r0, r1
 8002350:	4611      	mov	r1, r2
 8002352:	2200      	movs	r2, #0
 8002354:	6022      	str	r2, [r4, #0]
 8002356:	461a      	mov	r2, r3
 8002358:	f7fe fa40 	bl	80007dc <_read>
 800235c:	1c43      	adds	r3, r0, #1
 800235e:	d102      	bne.n	8002366 <_read_r+0x1e>
 8002360:	6823      	ldr	r3, [r4, #0]
 8002362:	b103      	cbz	r3, 8002366 <_read_r+0x1e>
 8002364:	602b      	str	r3, [r5, #0]
 8002366:	bd38      	pop	{r3, r4, r5, pc}
 8002368:	200000a0 	.word	0x200000a0

0800236c <_fstat_r>:
 800236c:	b538      	push	{r3, r4, r5, lr}
 800236e:	4c07      	ldr	r4, [pc, #28]	; (800238c <_fstat_r+0x20>)
 8002370:	2300      	movs	r3, #0
 8002372:	4605      	mov	r5, r0
 8002374:	4608      	mov	r0, r1
 8002376:	4611      	mov	r1, r2
 8002378:	6023      	str	r3, [r4, #0]
 800237a:	f7fe fa58 	bl	800082e <_fstat>
 800237e:	1c43      	adds	r3, r0, #1
 8002380:	d102      	bne.n	8002388 <_fstat_r+0x1c>
 8002382:	6823      	ldr	r3, [r4, #0]
 8002384:	b103      	cbz	r3, 8002388 <_fstat_r+0x1c>
 8002386:	602b      	str	r3, [r5, #0]
 8002388:	bd38      	pop	{r3, r4, r5, pc}
 800238a:	bf00      	nop
 800238c:	200000a0 	.word	0x200000a0

08002390 <_isatty_r>:
 8002390:	b538      	push	{r3, r4, r5, lr}
 8002392:	4c06      	ldr	r4, [pc, #24]	; (80023ac <_isatty_r+0x1c>)
 8002394:	2300      	movs	r3, #0
 8002396:	4605      	mov	r5, r0
 8002398:	4608      	mov	r0, r1
 800239a:	6023      	str	r3, [r4, #0]
 800239c:	f7fe fa57 	bl	800084e <_isatty>
 80023a0:	1c43      	adds	r3, r0, #1
 80023a2:	d102      	bne.n	80023aa <_isatty_r+0x1a>
 80023a4:	6823      	ldr	r3, [r4, #0]
 80023a6:	b103      	cbz	r3, 80023aa <_isatty_r+0x1a>
 80023a8:	602b      	str	r3, [r5, #0]
 80023aa:	bd38      	pop	{r3, r4, r5, pc}
 80023ac:	200000a0 	.word	0x200000a0

080023b0 <_init>:
 80023b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023b2:	bf00      	nop
 80023b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023b6:	bc08      	pop	{r3}
 80023b8:	469e      	mov	lr, r3
 80023ba:	4770      	bx	lr

080023bc <_fini>:
 80023bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023be:	bf00      	nop
 80023c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023c2:	bc08      	pop	{r3}
 80023c4:	469e      	mov	lr, r3
 80023c6:	4770      	bx	lr
